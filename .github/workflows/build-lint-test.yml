name: Build, lint & test

on:
  workflow_dispatch:
  pull_request:
  merge_group:
    types: [checks_requested]
  push:
    branches:
      - main

env:
  TZ: "Europe/Amsterdam"

jobs:
  backend:
    name: Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    env:
      CARGO_TERM_COLOR: always
      SQLX_OFFLINE: "true"
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      # Build frontend so that it can be included in the backend build
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install npm dependencies
        run: npm ci
        working-directory: ./frontend
      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
      # Compile and test backend
      - name: Install musl
        run: sudo apt-get update && sudo apt-get install -y musl-tools
      - name: Setup Rust
        shell: bash
        run: >
          rustup update stable &&
          rustup default stable &&
          rustup target add x86_64-unknown-linux-musl
      - name: Cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: "backend -> target"
      - name: Check rustfmt
        run: cargo --verbose --locked fmt --all -- --check
      - name: Check Clippy with all features
        run: cargo --verbose --locked clippy --target=x86_64-unknown-linux-musl --all-targets --all-features -- -D warnings
      - name: Check Clippy without default features
        run: cargo --verbose --locked clippy --target=x86_64-unknown-linux-musl --all-targets --no-default-features -- -D warnings
      - name: Run tests
        run: cargo --verbose --locked test --target=x86_64-unknown-linux-musl --features embed-typst -- --nocapture
      - name: Build
        run: cargo --verbose --locked build --target=x86_64-unknown-linux-musl --features memory-serve,embed-typst
      - uses: actions/upload-artifact@v4
        with:
          name: abacus
          path: backend/target/x86_64-unknown-linux-musl/debug/abacus

  frontend:
    name: Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Check formatting
        run: npx prettier --check .
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
      - name: Build
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

  playwright-ladle:
    name: Playwright Ladle tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps --no-shell
      - name: Run ladle playwright tests
        run: npm run test:ladle
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: "Playwright Ladle ubuntu-latest"
          files: frontend/playwright.ladle.junit.xml
          disable_search: true
          fail_ci_if_error: true

  playwright-e2e:
    name: Playwright e2e tests
    needs:
      - backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps --no-shell
      - name: Download Abacus
        uses: actions/download-artifact@v4
        with:
          name: abacus
          path: builds/backend
      - name: Make Abacus executable
        run: chmod a+x ../builds/backend/abacus
      - name: Run e2e playwright tests
        run: npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-ubuntu-latest
          path: frontend/playwright-report/
          retention-days: 30
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          name: "Playwright e2e"
          files: frontend/playwright.e2e.junit.xml
          disable_search: true
          fail_ci_if_error: true

  deploy:
    if: "github.repository == 'kiesraad/abacus' && !github.event.pull_request.head.repo.fork"
    name: Deploy to abacus-test.nl
    needs:
      - backend
    environment:
      name: test
      url: https://${{ github.sha }}.abacus-test.nl
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Download Abacus
        uses: actions/download-artifact@v4
        with:
          name: abacus
      - name: Strip debug symbols
        run: strip abacus
      - name: Upload binary to test server
        run: |
          curl -s \
          --fail \
          -H "Authorization: Bearer ${{ secrets.ABACUS_TEST_API_KEY }}" \
          -T ./abacus \
          https://abacus-test.nl/etes/api/v1/executable/${{ github.event.pull_request.head.sha || github.sha }}/${{ github.sha }}
