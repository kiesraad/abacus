name: Release

on:
  workflow_dispatch:
  # Run every Sunday at 12:00 UTC
  schedule:
    - cron: "0 12 * * 0"

permissions:
  contents: read
  pull-requests: write

jobs:
  build-frontend:
    name: Build production frontend (on linux only)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    env:
      NODE_ENV: production
      SHOW_DEV_PAGE: false
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci --omit=dev
      - name: Build
        run: npm run build
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-production-build
          path: frontend/dist

  build:
    if: github.repository == 'kiesraad/abacus'
    name: Build
    needs:
      - build-frontend
    permissions:
      contents: read
      attestations: write
      id-token: write
    strategy:
      matrix:
        target:
          - os: ubuntu-latest
            name: x86_64-unknown-linux-musl
            binary: backend/target/x86_64-unknown-linux-musl/release/abacus
          - os: macos-latest
            name: aarch64-apple-darwin
            binary: backend/target/aarch64-apple-darwin/release/abacus
          - os: windows-latest
            name: x86_64-pc-windows-msvc
            binary: backend/target/x86_64-pc-windows-msvc/release/abacus.exe
    runs-on: ${{ matrix.target.os }}
    defaults:
      run:
        working-directory: ./backend
    env:
      CARGO_TERM_COLOR: always
      SQLX_OFFLINE: "true"
    steps:
      - uses: actions/checkout@v5
      - name: Download Abacus Frontend
        uses: actions/download-artifact@v5
        with:
          name: frontend-production-build
          path: frontend/dist
      - name: Setup Rust
        run: rustup update stable && rustup default stable
      - name: Install target
        run: rustup target add ${{ matrix.target.name }}
      - name: Install musl
        run: sudo apt-get update && sudo apt-get install -y musl-tools
        if: matrix.target.os == 'ubuntu-latest'
      - name: Run tests
        run: cargo --locked test --release --no-default-features --features memory-serve,embed-typst,e2e-helpers,airgap-detection --target=${{ matrix.target.name }}
      # no airgap detection build
      - name: Build without airgap detection
        run: cargo --locked build --release --no-default-features --features memory-serve,embed-typst --target=${{ matrix.target.name }}
      - uses: actions/upload-artifact@v4
        with:
          name: abacus-${{ matrix.target.os }}-no-airgap-detection
          path: ${{ matrix.target.binary }}
      # airgap detection build
      - name: Build
        run: cargo --locked build --release --no-default-features --features memory-serve,embed-typst,airgap-detection --target=${{ matrix.target.name }}
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: ${{ matrix.target.binary }}
      - uses: actions/upload-artifact@v4
        with:
          name: abacus-release-${{ matrix.target.os }}
          path: ${{ matrix.target.binary }}

  playwright-e2e:
    name: Playwright e2e tests (${{ matrix.os }}
    needs:
      - build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: frontend
    env:
      RELEASE_BUILD: true
    steps:
      - uses: actions/checkout@v5
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 22
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps --no-shell
      - name: Download abacus
        uses: actions/download-artifact@v5
        with:
          name: abacus-${{ matrix.os }}-no-airgap-detection
          path: builds/backend
      - name: make backend build executable
        run: chmod a+x ../builds/backend/abacus
        if: runner.os != 'Windows'
      - name: Run Playwright e2e tests
        run: npm run test:e2e
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-release-${{ matrix.os }}
          path: frontend/playwright-report/
          retention-days: 30

  release:
    name: Release
    needs:
      - build
      - playwright-e2e
    runs-on: ubuntu-latest
    permissions:
      # contents write permission is needed to push the tag
      contents: write
    steps:
      - uses: actions/checkout@v5
      - name: Determine release tag
        run: |
          VERSION=$(sed -n '/version\s*=\s*"\([^"]*\)"/{s//\1/p;q}' Cargo.toml)
          BUILD_DATE=$(date -u +'%Y-%m-%d')
          BUILD_DATE_SHORT=$(date -u +'%Y%m%d')
          SHA_SHORT=$(git rev-parse --short HEAD)
          TAG="v${VERSION}-alpha.${BUILD_DATE_SHORT}.${SHA_SHORT}"
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_ENV
        working-directory: backend
      - name: Create release directory
        run: mkdir -p release
      - name: Download abacus
        uses: actions/download-artifact@v5
        with:
          pattern: abacus-release-*
          path: release/
      - name: Rename binary
        run: |
          mv abacus-release-ubuntu-latest/abacus abacus-linux-${{ env.TAG}}
          mv abacus-release-macos-latest/abacus abacus-macos-${{ env.TAG}}
          mv abacus-release-windows-latest/abacus.exe abacus-windows-${{ env.TAG}}.exe
          rmdir abacus-release-ubuntu-latest abacus-release-macos-latest abacus-release-windows-latest
        working-directory: release
      - name: Create a SHA256SUMS file
        run: sha256sum -b * > SHA256SUMS
        working-directory: release
      - name: Create git tag
        run: git tag $TAG
      - name: Push git tag
        run: git push origin $TAG
      - name: Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        with:
          body: This is an alpha release of Abacus, commit ${{ github.sha }} on ${{ env.BUILD_DATE }}
          tag_name: ${{ env.TAG }}
          prerelease: true
          target_commitish: "${{ github.sha }}"
          files: release/*
          token: ${{ secrets.GITHUB_TOKEN }}
          name: Version ${{ env.TAG }}

  deploy:
    name: Deploy to abacus-test.nl, without airgap detection
    needs:
      - build
      - release
    environment:
      name: release
      url: https://${{ github.sha }}.abacus-test.nl
    permissions:
      contents: read
      deployments: write
    runs-on: ubuntu-latest
    steps:
      - name: Download abacus
        uses: actions/download-artifact@v5
        with:
          name: abacus-ubuntu-latest-no-airgap-detection
      - name: Upload binary to test server
        run: |
          curl -s -v \
          --fail \
          -H "Authorization: Bearer ${{ secrets.ABACUS_TEST_API_KEY }}" \
          -T ./abacus \
          https://abacus-test.nl/etes/api/v1/executable/${{ github.sha }}/${{ github.sha }}
