{
  "openapi": "3.1.0",
  "info": {
    "title": "abacus",
    "description": "",
    "license": {
      "name": "EUPL-1.2",
      "identifier": "EUPL-1.2"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/elections": {
      "get": {
        "tags": [
          "election"
        ],
        "summary": "Get a list of all elections, without their candidate lists",
        "operationId": "election_list",
        "responses": {
          "200": {
            "description": "Election list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "election"
        ],
        "summary": "Create an election. For test usage only!",
        "operationId": "election_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElectionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Election created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Election"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}": {
      "get": {
        "tags": [
          "election"
        ],
        "summary": "Get election details including the election's candidate list (political groups) and its polling stations",
        "operationId": "election_details",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/apportionment": {
      "post": {
        "tags": [
          "apportionment"
        ],
        "summary": "Get the seat allocation for an election",
        "operationId": "election_apportionment",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election Apportionment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionApportionmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Drawing of lots is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_pdf_results": {
      "get": {
        "tags": [
          "election"
        ],
        "summary": "Download a generated PDF with election results",
        "operationId": "election_download_pdf_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PDF",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.pdf\""
              }
            },
            "content": {
              "application/pdf": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_xml_results": {
      "get": {
        "tags": [
          "election"
        ],
        "summary": "Download a generated EML_NL 510 XML file with election results",
        "operationId": "election_download_xml_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "XML",
            "content": {
              "text/xml": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_zip_results": {
      "get": {
        "tags": [
          "election"
        ],
        "summary": "Download a zip containing a PDF for the PV and the EML with election results",
        "operationId": "election_download_zip_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ZIP",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.zip\""
              }
            },
            "content": {
              "application/zip": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/polling_stations": {
      "get": {
        "tags": [
          "polling_station"
        ],
        "summary": "Get a list of all [PollingStation]s for an election",
        "operationId": "polling_station_list",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station listing successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Election not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "polling_station"
        ],
        "summary": "Create a new [PollingStation]",
        "operationId": "polling_station_create",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollingStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Polling station created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Election not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Polling station already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/polling_stations/{polling_station_id}": {
      "get": {
        "tags": [
          "polling_station"
        ],
        "summary": "Get a [PollingStation]",
        "operationId": "polling_station_get",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "polling_station"
        ],
        "summary": "Update a [PollingStation]",
        "operationId": "polling_station_update",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollingStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Polling station updated successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "polling_station"
        ],
        "summary": "Delete a [PollingStation]",
        "operationId": "polling_station_delete",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/status": {
      "get": {
        "tags": [
          "data_entry"
        ],
        "summary": "Get election polling stations data entry statuses",
        "operationId": "election_status",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/{entry_number}": {
      "get": {
        "tags": [
          "data_entry"
        ],
        "summary": "Get an in-progress (not finalised) data entry for a polling station",
        "operationId": "polling_station_data_entry_get",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDataEntryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "data_entry"
        ],
        "summary": "Save or update a data entry for a polling station",
        "operationId": "polling_station_data_entry_save",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data entry saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveDataEntryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "data_entry"
        ],
        "summary": "Delete an in-progress (not finalised) data entry for a polling station",
        "operationId": "polling_station_data_entry_delete",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Data entry deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/{entry_number}/finalise": {
      "post": {
        "tags": [
          "data_entry"
        ],
        "summary": "Finalise the data entry for a polling station",
        "operationId": "polling_station_data_entry_finalise",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry finalised successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Lists all users",
        "operationId": "user_list",
        "responses": {
          "200": {
            "description": "User list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Create a new user",
        "operationId": "user_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/account": {
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "Update the user's account with a new password and optionally new fullname",
        "operationId": "account_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Login endpoint, authenticates a user and creates a new session + session cookie",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The logged in user id and user name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/logout": {
      "post": {
        "tags": [
          "authentication"
        ],
        "summary": "Logout endpoint, deletes the session cookie",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Successful logout, or user was already logged out"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/whoami": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get current logged-in user endpoint",
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "The current user name and id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{user_id}": {
      "get": {
        "tags": [
          "authentication"
        ],
        "summary": "Get a user",
        "operationId": "user_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "authentication"
        ],
        "summary": "Update a user",
        "operationId": "user_update",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "authentication"
        ],
        "summary": "Delete a user",
        "operationId": "user_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbsoluteMajorityChange": {
        "type": "object",
        "description": "Contains information about the enactment of article P 9 of the Kieswet.",
        "required": [
          "pg_retracted_seat",
          "pg_assigned_seat"
        ],
        "properties": {
          "pg_assigned_seat": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number which the residual seat is assigned to",
            "minimum": 0
          },
          "pg_retracted_seat": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number which the residual seat is retracted from",
            "minimum": 0
          }
        }
      },
      "AccountUpdateRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "ApportionmentResult": {
        "type": "object",
        "description": "The result of the apportionment procedure. This contains the number of seats and the quota\nthat was used. It then contains the initial standing after full seats were assigned,\nand each of the changes and intermediate standings. The final standing contains the\nnumber of seats per political group that was assigned after all seats were assigned.",
        "required": [
          "seats",
          "full_seats",
          "residual_seats",
          "quota",
          "steps",
          "final_standing"
        ],
        "properties": {
          "final_standing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupSeatAssignment"
            }
          },
          "full_seats": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "quota": {
            "$ref": "#/components/schemas/Fraction"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "seats": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApportionmentStep"
            }
          }
        }
      },
      "ApportionmentStep": {
        "type": "object",
        "description": "Records the details for a specific residual seat, and how the standing is\nonce that residual seat was assigned",
        "required": [
          "residual_seat_number",
          "change",
          "standing"
        ],
        "properties": {
          "change": {
            "$ref": "#/components/schemas/AssignedSeat"
          },
          "residual_seat_number": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "standing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupStanding"
            }
          }
        }
      },
      "AssignedSeat": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/LargestAverageAssignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "assigned_by"
                ],
                "properties": {
                  "assigned_by": {
                    "type": "string",
                    "enum": [
                      "LargestAverage"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/LargestRemainderAssignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "assigned_by"
                ],
                "properties": {
                  "assigned_by": {
                    "type": "string",
                    "enum": [
                      "LargestRemainder"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbsoluteMajorityChange"
              },
              {
                "type": "object",
                "required": [
                  "assigned_by"
                ],
                "properties": {
                  "assigned_by": {
                    "type": "string",
                    "enum": [
                      "AbsoluteMajorityChange"
                    ]
                  }
                }
              }
            ]
          }
        ],
        "description": "Records the political group and specific change for a specific residual seat"
      },
      "Candidate": {
        "type": "object",
        "description": "Candidate",
        "required": [
          "number",
          "initials",
          "last_name",
          "locality"
        ],
        "properties": {
          "country_code": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/CandidateGender"
          },
          "initials": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "last_name_prefix": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CandidateGender": {
        "type": "string",
        "description": "Candidate gender",
        "enum": [
          "Male",
          "Female",
          "X"
        ]
      },
      "CandidateVotes": {
        "type": "object",
        "required": [
          "number",
          "votes"
        ],
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "votes": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "username",
          "temp_password",
          "role"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "temp_password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "Credentials": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "DataEntry": {
        "type": "object",
        "description": "Request structure for saving data entry of polling station results",
        "required": [
          "progress",
          "data",
          "client_state"
        ],
        "properties": {
          "client_state": {
            "type": "object",
            "description": "Client state for the data entry (arbitrary JSON)"
          },
          "data": {
            "$ref": "#/components/schemas/PollingStationResults",
            "description": "Data entry for a polling station"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "description": "Data entry progress between 0 and 100",
            "maximum": 100,
            "minimum": 0
          }
        }
      },
      "DataEntryStatusName": {
        "type": "string",
        "enum": [
          "first_entry_not_started",
          "first_entry_in_progress",
          "second_entry_not_started",
          "second_entry_in_progress",
          "entries_different",
          "definitive"
        ]
      },
      "DifferencesCounts": {
        "type": "object",
        "description": "Differences counts, part of the polling station results.",
        "required": [
          "more_ballots_count",
          "fewer_ballots_count",
          "unreturned_ballots_count",
          "too_few_ballots_handed_out_count",
          "too_many_ballots_handed_out_count",
          "other_explanation_count",
          "no_explanation_count"
        ],
        "properties": {
          "fewer_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of fewer counted ballots (\"Er zijn minder stembiljetten geteld. Hoeveel stembiljetten zijn er minder geteld\")",
            "minimum": 0
          },
          "more_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of more counted ballots (\"Er zijn méér stembiljetten geteld. Hoeveel stembiljetten zijn er meer geteld?\")",
            "minimum": 0
          },
          "no_explanation_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of no explanations (\"Hoe vaak is er geen verklaring voor het verschil?\")",
            "minimum": 0
          },
          "other_explanation_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of other explanations (\"Hoe vaak is er een andere verklaring voor het verschil?\")",
            "minimum": 0
          },
          "too_few_ballots_handed_out_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of fewer ballots handed out (\"Hoe vaak is er een stembiljet te weinig uitgereikt?\")",
            "minimum": 0
          },
          "too_many_ballots_handed_out_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of more ballots handed out (\"Hoe vaak is er een stembiljet te veel uitgereikt?\")",
            "minimum": 0
          },
          "unreturned_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of unreturned ballots (\"Hoe vaak heeft een kiezer het stembiljet niet ingeleverd?\")",
            "minimum": 0
          }
        }
      },
      "Election": {
        "type": "object",
        "description": "Election, optionally with its political groups",
        "required": [
          "id",
          "name",
          "location",
          "number_of_voters",
          "category",
          "number_of_seats",
          "election_date",
          "nomination_date",
          "status"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ElectionCategory"
          },
          "election_date": {
            "type": "string",
            "format": "date"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nomination_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "political_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroup"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ElectionStatus"
          }
        }
      },
      "ElectionApportionmentResponse": {
        "type": "object",
        "description": "Election details response, including the election's candidate list (political groups) and its polling stations",
        "required": [
          "apportionment",
          "election_summary"
        ],
        "properties": {
          "apportionment": {
            "$ref": "#/components/schemas/ApportionmentResult"
          },
          "election_summary": {
            "$ref": "#/components/schemas/ElectionSummary"
          }
        }
      },
      "ElectionCategory": {
        "type": "string",
        "description": "Election category (limited for now)",
        "enum": [
          "Municipal"
        ]
      },
      "ElectionDetailsResponse": {
        "type": "object",
        "description": "Election details response, including the election's candidate list (political groups) and its polling stations",
        "required": [
          "election",
          "polling_stations"
        ],
        "properties": {
          "election": {
            "$ref": "#/components/schemas/Election"
          },
          "polling_stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingStation"
            }
          }
        }
      },
      "ElectionListResponse": {
        "type": "object",
        "description": "Election list response\n\nDoes not include the candidate list (political groups) to keep the response size small.",
        "required": [
          "elections"
        ],
        "properties": {
          "elections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Election"
            }
          }
        }
      },
      "ElectionRequest": {
        "type": "object",
        "description": "Election request",
        "required": [
          "name",
          "location",
          "number_of_voters",
          "category",
          "number_of_seats",
          "election_date",
          "nomination_date",
          "status",
          "political_groups"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ElectionCategory"
          },
          "election_date": {
            "type": "string",
            "format": "date"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nomination_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "political_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroup"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ElectionStatus"
          }
        }
      },
      "ElectionStatus": {
        "type": "string",
        "description": "Election status (limited for now)",
        "enum": [
          "DataEntryInProgress",
          "DataEntryFinished"
        ]
      },
      "ElectionStatusResponse": {
        "type": "object",
        "description": "Election polling stations data entry statuses response",
        "required": [
          "statuses"
        ],
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElectionStatusResponseEntry"
            }
          }
        }
      },
      "ElectionStatusResponseEntry": {
        "type": "object",
        "description": "Election polling stations data entry statuses response",
        "required": [
          "polling_station_id",
          "status"
        ],
        "properties": {
          "finished_at": {
            "type": "string"
          },
          "first_data_entry_progress": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_station_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "second_data_entry_progress": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/DataEntryStatusName"
          }
        }
      },
      "ElectionSummary": {
        "type": "object",
        "description": "Contains a summary of the election results, added up from the votes of all polling stations.",
        "required": [
          "voters_counts",
          "votes_counts",
          "differences_counts",
          "recounted_polling_stations",
          "political_group_votes"
        ],
        "properties": {
          "differences_counts": {
            "$ref": "#/components/schemas/SummaryDifferencesCounts",
            "description": "The differences between voters and votes"
          },
          "political_group_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupVotes"
            },
            "description": "The summary votes for each political group (and each candidate within)"
          },
          "recounted_polling_stations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "A list of polling stations that were recounted"
          },
          "voters_counts": {
            "$ref": "#/components/schemas/VotersCounts",
            "description": "The total number of voters"
          },
          "votes_counts": {
            "$ref": "#/components/schemas/VotesCounts",
            "description": "The total number of votes"
          }
        }
      },
      "ErrorReference": {
        "type": "string",
        "description": "Error reference used to show the corresponding error message to the end-user",
        "enum": [
          "ApportionmentNotAvailableUntilDataEntryFinalised",
          "DatabaseError",
          "DrawingOfLotsRequired",
          "EntryNotFound",
          "EntryNotUnique",
          "EntryNumberNotSupported",
          "InternalServerError",
          "InvalidData",
          "InvalidDataEntryNumber",
          "InvalidJson",
          "InvalidPassword",
          "InvalidPoliticalGroup",
          "InvalidSession",
          "InvalidStateTransition",
          "InvalidUsernameOrPassword",
          "InvalidVoteCandidate",
          "InvalidVoteGroup",
          "PdfGenerationError",
          "PollingStationDataValidation",
          "PollingStationFirstEntryAlreadyFinalised",
          "PollingStationFirstEntryNotFinalised",
          "PollingStationRepeated",
          "PollingStationResultsAlreadyFinalised",
          "PollingStationSecondEntryAlreadyFinalised",
          "PollingStationValidationErrors",
          "UserNotFound",
          "Unauthorized"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Response structure for errors",
        "required": [
          "error",
          "fatal",
          "reference"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "fatal": {
            "type": "boolean"
          },
          "reference": {
            "$ref": "#/components/schemas/ErrorReference"
          }
        }
      },
      "Fraction": {
        "type": "object",
        "description": "Fraction with the integer part split out for display purposes",
        "required": [
          "integer",
          "numerator",
          "denominator"
        ],
        "properties": {
          "denominator": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "numerator": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "GetDataEntryResponse": {
        "type": "object",
        "description": "Response structure for getting data entry of polling station results",
        "required": [
          "progress",
          "data",
          "client_state",
          "validation_results",
          "updated_at"
        ],
        "properties": {
          "client_state": {
            "type": "object"
          },
          "data": {
            "$ref": "#/components/schemas/PollingStationResults"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "updated_at": {
            "type": "string"
          },
          "validation_results": {
            "$ref": "#/components/schemas/ValidationResults"
          }
        }
      },
      "LargestAverageAssignedSeat": {
        "type": "object",
        "description": "Contains the details for an assigned seat, assigned through the largest average method.",
        "required": [
          "selected_pg_number",
          "pg_options",
          "pg_assigned",
          "votes_per_seat"
        ],
        "properties": {
          "pg_assigned": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same average, that have been assigned a seat"
          },
          "pg_options": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same average, that have not been assigned a seat"
          },
          "selected_pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "The political group that was selected for this seat has this political group number",
            "minimum": 0
          },
          "votes_per_seat": {
            "$ref": "#/components/schemas/Fraction",
            "description": "This is the votes per seat achieved by the selected political group"
          }
        }
      },
      "LargestRemainderAssignedSeat": {
        "type": "object",
        "description": "Contains the details for an assigned seat, assigned through the largest remainder method.",
        "required": [
          "selected_pg_number",
          "pg_options",
          "pg_assigned",
          "remainder_votes"
        ],
        "properties": {
          "pg_assigned": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same remainder, that have been assigned a seat"
          },
          "pg_options": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same remainder, that have not been assigned a seat"
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The number of remainder votes achieved by the selected political group"
          },
          "selected_pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "The political group that was selected for this seat has this political group number",
            "minimum": 0
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "user_id",
          "username",
          "role",
          "needs_password_change"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "needs_password_change": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "username": {
            "type": "string"
          }
        }
      },
      "PoliticalGroup": {
        "type": "object",
        "description": "Political group with its candidates",
        "required": [
          "number",
          "name",
          "candidates"
        ],
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            }
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "PoliticalGroupSeatAssignment": {
        "type": "object",
        "description": "Contains information about the final assignment of seats for a specific political group.",
        "required": [
          "pg_number",
          "votes_cast",
          "remainder_votes",
          "meets_remainder_threshold",
          "full_seats",
          "residual_seats",
          "total_seats"
        ],
        "properties": {
          "full_seats": {
            "type": "integer",
            "format": "int64",
            "description": "The number of full seats assigned to this group",
            "minimum": 0
          },
          "meets_remainder_threshold": {
            "type": "boolean",
            "description": "Whether this group met the threshold for largest remainder seat assignment"
          },
          "pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number for which this assignment applies",
            "minimum": 0
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The remainder votes that were not used to get full seats assigned to this political group"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int64",
            "description": "The number of residual seats assigned to this group",
            "minimum": 0
          },
          "total_seats": {
            "type": "integer",
            "format": "int64",
            "description": "The total number of seats assigned to this group",
            "minimum": 0
          },
          "votes_cast": {
            "type": "integer",
            "format": "int64",
            "description": "The number of votes cast for this group",
            "minimum": 0
          }
        }
      },
      "PoliticalGroupStanding": {
        "type": "object",
        "description": "Contains the standing for a specific political group. This is all the information\nthat is needed to compute the apportionment for that specific political group.",
        "required": [
          "pg_number",
          "votes_cast",
          "remainder_votes",
          "meets_remainder_threshold",
          "next_votes_per_seat",
          "full_seats",
          "residual_seats"
        ],
        "properties": {
          "full_seats": {
            "type": "integer",
            "format": "int64",
            "description": "The number of full seats this political group got assigned",
            "minimum": 0
          },
          "meets_remainder_threshold": {
            "type": "boolean",
            "description": "Whether the remainder votes meet the threshold to be applicable for largest remainder seat assignment"
          },
          "next_votes_per_seat": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The number of votes per seat if a new seat would be added to the current residual seats"
          },
          "pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number for which this standing applies",
            "minimum": 0
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The remainder of votes that was not used to get full seats (does not have to be a whole number of votes)"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int64",
            "description": "The current number of residual seats this political group got assigned",
            "minimum": 0
          },
          "votes_cast": {
            "type": "integer",
            "format": "int64",
            "description": "The number of votes cast for this group",
            "minimum": 0
          }
        }
      },
      "PoliticalGroupVotes": {
        "type": "object",
        "required": [
          "number",
          "total",
          "candidate_votes"
        ],
        "properties": {
          "candidate_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateVotes"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        }
      },
      "PollingStation": {
        "type": "object",
        "description": "Polling station of a certain [crate::election::Election]",
        "required": [
          "id",
          "election_id",
          "name",
          "number",
          "address",
          "postal_code",
          "locality"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "election_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "locality": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int64"
          },
          "polling_station_type": {
            "$ref": "#/components/schemas/PollingStationType"
          },
          "postal_code": {
            "type": "string"
          }
        }
      },
      "PollingStationListResponse": {
        "type": "object",
        "description": "Polling station list response",
        "required": [
          "polling_stations"
        ],
        "properties": {
          "polling_stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingStation"
            }
          }
        }
      },
      "PollingStationRequest": {
        "type": "object",
        "description": "Polling station of a certain [crate::election::Election]",
        "required": [
          "name",
          "number",
          "address",
          "postal_code",
          "locality"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int64"
          },
          "polling_station_type": {
            "$ref": "#/components/schemas/PollingStationType"
          },
          "postal_code": {
            "type": "string"
          }
        }
      },
      "PollingStationResults": {
        "type": "object",
        "description": "PollingStationResults, following the fields in Model Na 31-2 Bijlage 2.\n\nSee \"Model Na 31-2. Proces-verbaal van een gemeentelijk stembureau/stembureau voor het openbaar\nlichaam in een gemeente/openbaar lichaam waar een centrale stemopneming wordt verricht,\nBijlage 2: uitkomsten per stembureau\" from the\n[Kiesregeling](https://wetten.overheid.nl/BWBR0034180/2024-04-01#Bijlage1_DivisieNa31.2) or\n[Verkiezingstoolbox](https://www.rijksoverheid.nl/onderwerpen/verkiezingen/verkiezingentoolkit/modellen).",
        "required": [
          "voters_counts",
          "votes_counts",
          "differences_counts",
          "political_group_votes"
        ],
        "properties": {
          "differences_counts": {
            "$ref": "#/components/schemas/DifferencesCounts",
            "description": "Differences counts (\"3. Verschil tussen het aantal toegelaten kiezers en het aantal getelde stembiljetten\")"
          },
          "political_group_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupVotes"
            },
            "description": "Vote counts per list and candidate (5. \"Aantal stemmen per lijst en kandidaat\")"
          },
          "recounted": {
            "type": "boolean",
            "description": "Recounted (\"Is er herteld? - See form for official long description of the checkbox\")"
          },
          "voters_counts": {
            "$ref": "#/components/schemas/VotersCounts",
            "description": "Voters counts (\"1. Aantal toegelaten kiezers\")"
          },
          "voters_recounts": {
            "$ref": "#/components/schemas/VotersCounts",
            "description": "Voters recounts (\"3. Verschil tussen het aantal toegelaten kiezers en het aantal getelde stembiljetten\")\nWhen filled in, this field should replace `voters_counts` when using the results."
          },
          "votes_counts": {
            "$ref": "#/components/schemas/VotesCounts",
            "description": "Votes counts (\"2. Aantal getelde stembiljetten\")"
          }
        }
      },
      "PollingStationType": {
        "type": "string",
        "description": "Type of Polling station",
        "enum": [
          "FixedLocation",
          "Special",
          "Mobile"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "administrator",
          "typist",
          "coordinator"
        ]
      },
      "SaveDataEntryResponse": {
        "type": "object",
        "description": "Response structure for saving data entry of polling station results",
        "required": [
          "validation_results"
        ],
        "properties": {
          "validation_results": {
            "$ref": "#/components/schemas/ValidationResults"
          }
        }
      },
      "SumCount": {
        "type": "object",
        "description": "Contains a summary count, containing both the count and a list of polling\nstations that contributed to it.",
        "required": [
          "count",
          "polling_stations"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_stations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "SummaryDifferencesCounts": {
        "type": "object",
        "description": "Contains a summary of the differences, containing which polling stations had differences.",
        "required": [
          "more_ballots_count",
          "fewer_ballots_count",
          "unreturned_ballots_count",
          "too_few_ballots_handed_out_count",
          "too_many_ballots_handed_out_count",
          "other_explanation_count",
          "no_explanation_count"
        ],
        "properties": {
          "fewer_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "more_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "no_explanation_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "other_explanation_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "too_few_ballots_handed_out_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "too_many_ballots_handed_out_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "unreturned_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string"
          },
          "temp_password": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "description": "User object, corresponds to a row in the users table",
        "required": [
          "id",
          "username",
          "role",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "last_activity_at": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "updated_at": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "required": [
          "users"
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        }
      },
      "ValidationResult": {
        "type": "object",
        "required": [
          "fields",
          "code"
        ],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ValidationResultCode"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ValidationResultCode": {
        "type": "string",
        "enum": [
          "F101",
          "F201",
          "F202",
          "F203",
          "F204",
          "F301",
          "F302",
          "F303",
          "F304",
          "F305",
          "F401",
          "W201",
          "W202",
          "W203",
          "W204",
          "W205",
          "W206",
          "W207",
          "W208",
          "W209",
          "W301",
          "W302"
        ]
      },
      "ValidationResults": {
        "type": "object",
        "required": [
          "errors",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResult"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResult"
            }
          }
        }
      },
      "VotersCounts": {
        "type": "object",
        "description": "Voters counts, part of the polling station results.",
        "required": [
          "poll_card_count",
          "proxy_certificate_count",
          "voter_card_count",
          "total_admitted_voters_count"
        ],
        "properties": {
          "poll_card_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid poll cards (\"Aantal geldige stempassen\")",
            "minimum": 0
          },
          "proxy_certificate_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid proxy certificates (\"Aantal geldige volmachtbewijzen\")",
            "minimum": 0
          },
          "total_admitted_voters_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of admitted voters (\"Totaal aantal toegelaten kiezers\")",
            "minimum": 0
          },
          "voter_card_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid voter cards (\"Aantal geldige kiezerspassen\")",
            "minimum": 0
          }
        }
      },
      "VotesCounts": {
        "type": "object",
        "description": "Votes counts, part of the polling station results.",
        "required": [
          "votes_candidates_count",
          "blank_votes_count",
          "invalid_votes_count",
          "total_votes_cast_count"
        ],
        "properties": {
          "blank_votes_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of blank votes (\"Aantal blanco stembiljetten\")",
            "minimum": 0
          },
          "invalid_votes_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of invalid votes (\"Aantal ongeldige stembiljetten\")",
            "minimum": 0
          },
          "total_votes_cast_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of votes cast (\"Totaal aantal getelde stemmen\")",
            "minimum": 0
          },
          "votes_candidates_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid votes on candidates\n(\"Aantal stembiljetten met een geldige stem op een kandidaat\")",
            "minimum": 0
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "authentication",
      "description": "Authentication and user API"
    },
    {
      "name": "election",
      "description": "Election API"
    },
    {
      "name": "polling_station",
      "description": "Polling station API"
    }
  ]
}