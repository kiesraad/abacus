{
  "openapi": "3.1.0",
  "info": {
    "title": "abacus",
    "description": "",
    "license": {
      "name": "EUPL-1.2",
      "identifier": "EUPL-1.2"
    },
    "version": "0.1.0"
  },
  "paths": {
    "/api/committee_sessions": {
      "post": {
        "summary": "Create a new [CommitteeSession].",
        "operationId": "committee_session_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitteeSessionCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Committee session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitteeSession"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/committee_sessions/{committee_session_id}": {
      "put": {
        "summary": "Update a [CommitteeSession].",
        "operationId": "committee_session_update",
        "parameters": [
          {
            "name": "committee_session_id",
            "in": "path",
            "description": "Committee session database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitteeSessionUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Committee session updated successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Committee session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/committee_sessions/{committee_session_id}/status": {
      "put": {
        "summary": "Change the status of a [CommitteeSession].",
        "operationId": "committee_session_status_change",
        "parameters": [
          {
            "name": "committee_session_id",
            "in": "path",
            "description": "Committee session database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitteeSessionStatusChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Committee session status changed successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Committee session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/committee_sessions/{committee_session_id}/voters": {
      "put": {
        "summary": "Change the number of voters of a [CommitteeSession].",
        "operationId": "committee_session_number_of_voters_change",
        "parameters": [
          {
            "name": "committee_session_id",
            "in": "path",
            "description": "Committee session database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommitteeSessionNumberOfVotersChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Committee session number of voters changed successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Committee session not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections": {
      "get": {
        "summary": "Get a list of all elections, without their candidate lists and\na list of the current committee session for each election",
        "operationId": "election_list",
        "responses": {
          "200": {
            "description": "Election list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create an election. For test usage only!",
        "operationId": "election_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewElection"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Election created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionWithPoliticalGroups"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/import": {
      "post": {
        "summary": "Uploads election definition, validates it, saves it to the database, and returns the created election",
        "operationId": "election_import",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElectionAndCandidatesDefinitionImportRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Election imported",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionWithPoliticalGroups"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/import/validate": {
      "post": {
        "summary": "Uploads election definition, validates it and returns the associated election data and\na redacted hash, to be filled by the administrator.",
        "operationId": "election_import_validate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElectionAndCandidateDefinitionValidateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Election validated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionDefinitionValidateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}": {
      "get": {
        "summary": "Get election details including the election's candidate list (political groups),\nits polling stations and the current committee session",
        "operationId": "election_details",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/apportionment": {
      "post": {
        "summary": "Get the apportionment for an election",
        "operationId": "election_apportionment",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election Apportionment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionApportionmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "412": {
            "description": "Election apportionment is not yet available",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Election apportionment is not possible",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/committee_sessions": {
      "get": {
        "summary": "Get a list of all [CommitteeSession]s of an election",
        "operationId": "election_committee_session_list",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Committee session list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommitteeSessionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_n_10_2": {
      "get": {
        "operationId": "election_download_n_10_2",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ZIP",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.zip\""
              }
            },
            "content": {
              "application/zip": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_na_31_2_bijlage1": {
      "get": {
        "operationId": "election_download_na_31_2_bijlage1",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ZIP",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.zip\""
              }
            },
            "content": {
              "application/zip": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_pdf_results": {
      "get": {
        "summary": "Download a generated PDF with election results",
        "operationId": "election_download_pdf_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PDF",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.pdf\""
              }
            },
            "content": {
              "application/pdf": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_xml_results": {
      "get": {
        "summary": "Download a generated EML_NL 510 XML file with election results",
        "operationId": "election_download_xml_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "XML",
            "content": {
              "text/xml": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/download_zip_results": {
      "get": {
        "summary": "Download a zip containing a PDF for the PV and the EML with election results",
        "operationId": "election_download_zip_results",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ZIP",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string"
                },
                "description": "attachment; filename=\"filename.zip\""
              }
            },
            "content": {
              "application/zip": {}
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/polling_stations": {
      "get": {
        "summary": "Get a list of all [PollingStation]s for an election",
        "operationId": "polling_station_list",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station listing successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStationListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Election not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new [PollingStation]",
        "operationId": "polling_station_create",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollingStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Polling station created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Election not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Polling station already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/polling_stations/{polling_station_id}": {
      "get": {
        "summary": "Get a [PollingStation]",
        "operationId": "polling_station_get",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a [PollingStation]",
        "operationId": "polling_station_update",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PollingStationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Polling station updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PollingStation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a [PollingStation]",
        "operationId": "polling_station_delete",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Polling station deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Polling station not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/elections/{election_id}/status": {
      "get": {
        "summary": "Get election polling stations data entry statuses",
        "operationId": "election_status",
        "parameters": [
          {
            "name": "election_id",
            "in": "path",
            "description": "Election database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Election",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElectionStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/initialised": {
      "get": {
        "summary": "Check whether the application is initialised (an admin user exists + has logged in at least once)",
        "operationId": "initialised",
        "responses": {
          "200": {
            "description": "The application is initialised"
          },
          "418": {
            "description": "The application is not initialised",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log": {
      "get": {
        "summary": "List audit events",
        "operationId": "audit_log_list",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page number, default 1",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "level",
            "in": "query",
            "description": "Filter by log level",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event",
            "in": "query",
            "description": "Filter by event type",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "user",
            "in": "query",
            "description": "Filter by user ID",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              }
            }
          },
          {
            "name": "since",
            "in": "query",
            "description": "Only show events since the specified timestamp",
            "required": false,
            "schema": {
              "type": [
                "integer",
                "null"
              ],
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Audit log event list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/log-users": {
      "get": {
        "summary": "Lists all users that appear in the audit log",
        "operationId": "audit_log_list_users",
        "responses": {
          "200": {
            "description": "Audit log list of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditLogUser"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/resolve_differences": {
      "get": {
        "summary": "Get data entry differences to be resolved",
        "operationId": "polling_station_data_entry_get_differences",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry differences to be resolved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntryGetDifferencesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No data entry with differences found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Resolve data entry differences by providing a `ResolveDifferencesAction`",
        "operationId": "polling_station_data_entry_resolve_differences",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveDifferencesAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Differences resolved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntryStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/resolve_errors": {
      "get": {
        "summary": "Get accepted data entry errors to be resolved",
        "operationId": "polling_station_data_entry_get_errors",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry with errors and warnings to be resolved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntryGetErrorsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No data entry with accepted errors found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Resolve accepted data entry errors by providing a `ResolveErrorsAction`",
        "operationId": "polling_station_data_entry_resolve_errors",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResolveErrorsAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Errors resolved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntryStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/{entry_number}": {
      "post": {
        "summary": "Save a data entry for a polling station",
        "operationId": "polling_station_data_entry_save",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataEntry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Data entry saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaveDataEntryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an in-progress (not finalised) data entry for a polling station",
        "operationId": "polling_station_data_entry_delete",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Data entry deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/{entry_number}/claim": {
      "post": {
        "summary": "Claim a data entry for a polling station, returning any existing progress",
        "operationId": "polling_station_data_entry_claim",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry claimed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimDataEntryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/polling_stations/{polling_station_id}/data_entries/{entry_number}/finalise": {
      "post": {
        "summary": "Finalise the data entry for a polling station",
        "operationId": "polling_station_data_entry_finalise",
        "parameters": [
          {
            "name": "polling_station_id",
            "in": "path",
            "description": "Polling station database id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entry_number",
            "in": "path",
            "description": "Data entry number (first or second data entry)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data entry finalised successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataEntryStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Request cannot be completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "422": {
            "description": "JSON error or invalid data (Unprocessable Content)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user": {
      "get": {
        "summary": "Lists all users",
        "operationId": "user_list",
        "responses": {
          "200": {
            "description": "User list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "operationId": "user_create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict (username already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/account": {
      "put": {
        "summary": "Update the user's account with a new password and optionally new fullname",
        "operationId": "account_update",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The logged in user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/login": {
      "post": {
        "summary": "Login endpoint, authenticates a user and creates a new session + session cookie",
        "operationId": "login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credentials"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The logged in user id and user name",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/logout": {
      "post": {
        "summary": "Logout endpoint, deletes the session cookie",
        "operationId": "logout",
        "responses": {
          "200": {
            "description": "Successful logout, or user was already logged out"
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/whoami": {
      "get": {
        "summary": "Get current logged-in user endpoint",
        "operationId": "whoami",
        "responses": {
          "200": {
            "description": "The current user name and id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid user session",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{user_id}": {
      "get": {
        "summary": "Get a user",
        "operationId": "user_get",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "User id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a user",
        "operationId": "user_update",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "operationId": "user_delete",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AbsoluteMajorityReassignedSeat": {
        "type": "object",
        "description": "Contains information about the enactment of article P 9 of the Kieswet.",
        "required": [
          "pg_retracted_seat",
          "pg_assigned_seat"
        ],
        "properties": {
          "pg_assigned_seat": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number which the residual seat is assigned to",
            "minimum": 0
          },
          "pg_retracted_seat": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number which the residual seat is retracted from",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "AccountUpdateRequest": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuditEvent": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLoggedInDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserLoggedIn"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLoginFailedDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserLoginFailed"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserLoggedOutDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserLoggedOut"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserAccountUpdated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "eventType"
            ],
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "UserSessionExtended"
                ]
              }
            }
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserCreated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserUpdated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "UserDeleted"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ElectionDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "ElectionCreated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommitteeSessionDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "CommitteeSessionCreated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/CommitteeSessionDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "CommitteeSessionUpdated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ElectionDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "ApportionmentCreated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PollingStationDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "PollingStationCreated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PollingStationDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "PollingStationUpdated"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/PollingStationDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "PollingStationDeleted"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryClaimed"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntrySaved"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryDeleted"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryFinalised"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryDiscardedFirst"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryResumedFirst"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryKeptFirst"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryKeptSecond"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/DataEntryDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "DataEntryDiscardedBoth"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "eventType"
            ],
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "AirGapViolationDetected"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "eventType"
            ],
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "AirGapViolationResolved"
                ]
              }
            }
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ErrorDetails"
              },
              {
                "type": "object",
                "required": [
                  "eventType"
                ],
                "properties": {
                  "eventType": {
                    "type": "string",
                    "enum": [
                      "Error"
                    ]
                  }
                }
              }
            ]
          },
          {
            "type": "object",
            "required": [
              "eventType"
            ],
            "properties": {
              "eventType": {
                "type": "string",
                "enum": [
                  "UnknownEvent"
                ]
              }
            }
          }
        ]
      },
      "AuditEventLevel": {
        "type": "string",
        "enum": [
          "info",
          "success",
          "warning",
          "error"
        ]
      },
      "AuditLogEvent": {
        "type": "object",
        "required": [
          "id",
          "time",
          "event",
          "eventLevel",
          "ip"
        ],
        "properties": {
          "event": {
            "$ref": "#/components/schemas/AuditEvent"
          },
          "eventLevel": {
            "$ref": "#/components/schemas/AuditEventLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "ip": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "userFullname": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "userRole": {
            "$ref": "#/components/schemas/Role"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AuditLogListResponse": {
        "type": "object",
        "required": [
          "events",
          "page",
          "pages",
          "perPage"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogEvent"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "pages": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "perPage": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "AuditLogUser": {
        "type": "object",
        "required": [
          "id",
          "username",
          "fullname",
          "role"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Candidate": {
        "type": "object",
        "description": "Candidate",
        "required": [
          "number",
          "initials",
          "last_name",
          "locality"
        ],
        "properties": {
          "country_code": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "gender": {
            "$ref": "#/components/schemas/CandidateGender"
          },
          "initials": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "last_name_prefix": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "CandidateGender": {
        "type": "string",
        "description": "Candidate gender",
        "enum": [
          "Male",
          "Female",
          "X"
        ]
      },
      "CandidateNominationResult": {
        "type": "object",
        "description": "The result of the candidate nomination procedure.\nThis contains the preference threshold and percentage that was used.\nIt contains a list of all chosen candidates in alphabetical order.\nIt also contains the preferential nomination of candidates, the remaining\nnomination of candidates and the final ranking of candidates for each political group.",
        "required": [
          "preference_threshold",
          "chosen_candidates",
          "political_group_candidate_nomination"
        ],
        "properties": {
          "chosen_candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            },
            "description": "List of chosen candidates in alphabetical order"
          },
          "political_group_candidate_nomination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupCandidateNomination"
            },
            "description": "List of chosen candidates and candidate list ranking per political group"
          },
          "preference_threshold": {
            "$ref": "#/components/schemas/PreferenceThreshold",
            "description": "Preference threshold percentage and number of votes"
          }
        },
        "additionalProperties": false
      },
      "CandidateVotes": {
        "type": "object",
        "required": [
          "number",
          "votes"
        ],
        "properties": {
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "votes": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ClaimDataEntryResponse": {
        "type": "object",
        "description": "Response structure for getting data entry of polling station results",
        "required": [
          "data",
          "client_state",
          "validation_results"
        ],
        "properties": {
          "client_state": {
            "type": "object"
          },
          "data": {
            "$ref": "#/components/schemas/PollingStationResults"
          },
          "validation_results": {
            "$ref": "#/components/schemas/ValidationResults"
          }
        },
        "additionalProperties": false
      },
      "CommitteeSession": {
        "type": "object",
        "description": "Committee session",
        "required": [
          "id",
          "number",
          "election_id",
          "location",
          "start_date",
          "start_time",
          "status",
          "number_of_voters"
        ],
        "properties": {
          "election_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "location": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "start_date": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/CommitteeSessionStatus"
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionCreateRequest": {
        "type": "object",
        "description": "Committee session create request",
        "required": [
          "number",
          "election_id",
          "number_of_voters"
        ],
        "properties": {
          "election_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionDetails": {
        "type": "object",
        "required": [
          "sessionId",
          "sessionNumber",
          "sessionElectionId",
          "sessionLocation",
          "sessionStartDate",
          "sessionStartTime",
          "sessionStatus",
          "sessionNumberOfVoters"
        ],
        "properties": {
          "sessionElectionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "sessionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "sessionLocation": {
            "type": "string"
          },
          "sessionNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "sessionNumberOfVoters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "sessionStartDate": {
            "type": "string"
          },
          "sessionStartTime": {
            "type": "string"
          },
          "sessionStatus": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionListResponse": {
        "type": "object",
        "description": "Committee session list response",
        "required": [
          "committee_sessions"
        ],
        "properties": {
          "committee_sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitteeSession"
            }
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionNumberOfVotersChangeRequest": {
        "type": "object",
        "description": "Committee session number of voters change request",
        "required": [
          "number_of_voters"
        ],
        "properties": {
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionStatus": {
        "type": "string",
        "description": "Committee session status",
        "enum": [
          "created",
          "data_entry_not_started",
          "data_entry_in_progress",
          "data_entry_paused",
          "data_entry_finished"
        ]
      },
      "CommitteeSessionStatusChangeRequest": {
        "type": "object",
        "description": "Committee session status change request",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CommitteeSessionStatus"
          }
        },
        "additionalProperties": false
      },
      "CommitteeSessionUpdateRequest": {
        "type": "object",
        "description": "Committee session update request",
        "required": [
          "location",
          "start_date",
          "start_time"
        ],
        "properties": {
          "location": {
            "type": "string"
          },
          "start_date": {
            "type": "string"
          },
          "start_time": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "username",
          "temp_password",
          "role"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "temp_password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Credentials": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "password": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "DataEntry": {
        "type": "object",
        "description": "Request structure for saving data entry of polling station results",
        "required": [
          "progress",
          "data",
          "client_state"
        ],
        "properties": {
          "client_state": {
            "type": "object",
            "description": "Client state for the data entry (arbitrary JSON)"
          },
          "data": {
            "$ref": "#/components/schemas/PollingStationResults",
            "description": "Data entry for a polling station"
          },
          "progress": {
            "type": "integer",
            "format": "int32",
            "description": "Data entry progress between 0 and 100",
            "maximum": 100,
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "DataEntryDetails": {
        "type": "object",
        "required": [
          "pollingStationId",
          "dataEntryStatus",
          "dataEntryProgress"
        ],
        "properties": {
          "dataEntryProgress": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "dataEntryStatus": {
            "type": "string"
          },
          "finishedAt": {
            "type": [
              "string",
              "null"
            ]
          },
          "firstEntryUserId": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          },
          "pollingStationId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "secondEntryUserId": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "DataEntryGetDifferencesResponse": {
        "type": "object",
        "required": [
          "first_entry_user_id",
          "first_entry",
          "second_entry_user_id",
          "second_entry"
        ],
        "properties": {
          "first_entry": {
            "$ref": "#/components/schemas/PollingStationResults"
          },
          "first_entry_user_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "second_entry": {
            "$ref": "#/components/schemas/PollingStationResults"
          },
          "second_entry_user_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "DataEntryGetErrorsResponse": {
        "type": "object",
        "required": [
          "first_entry_user_id",
          "finalised_first_entry",
          "first_entry_finished_at",
          "validation_results"
        ],
        "properties": {
          "finalised_first_entry": {
            "$ref": "#/components/schemas/PollingStationResults"
          },
          "first_entry_finished_at": {
            "type": "string"
          },
          "first_entry_user_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "validation_results": {
            "$ref": "#/components/schemas/ValidationResults"
          }
        },
        "additionalProperties": false
      },
      "DataEntryStatusName": {
        "type": "string",
        "enum": [
          "first_entry_not_started",
          "first_entry_in_progress",
          "first_entry_has_errors",
          "second_entry_not_started",
          "second_entry_in_progress",
          "entries_different",
          "definitive"
        ]
      },
      "DataEntryStatusResponse": {
        "type": "object",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/DataEntryStatusName"
          }
        },
        "additionalProperties": false
      },
      "DifferencesCounts": {
        "type": "object",
        "description": "Differences counts, part of the polling station results.",
        "required": [
          "more_ballots_count",
          "fewer_ballots_count",
          "unreturned_ballots_count",
          "too_few_ballots_handed_out_count",
          "too_many_ballots_handed_out_count",
          "other_explanation_count",
          "no_explanation_count"
        ],
        "properties": {
          "fewer_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of fewer counted ballots (\"Er zijn minder stembiljetten geteld. Hoeveel stembiljetten zijn er minder geteld\")",
            "minimum": 0
          },
          "more_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of more counted ballots (\"Er zijn méér stembiljetten geteld. Hoeveel stembiljetten zijn er meer geteld?\")",
            "minimum": 0
          },
          "no_explanation_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of no explanations (\"Hoe vaak is er geen verklaring voor het verschil?\")",
            "minimum": 0
          },
          "other_explanation_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of other explanations (\"Hoe vaak is er een andere verklaring voor het verschil?\")",
            "minimum": 0
          },
          "too_few_ballots_handed_out_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of fewer ballots handed out (\"Hoe vaak is er een stembiljet te weinig uitgereikt?\")",
            "minimum": 0
          },
          "too_many_ballots_handed_out_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of more ballots handed out (\"Hoe vaak is er een stembiljet te veel uitgereikt?\")",
            "minimum": 0
          },
          "unreturned_ballots_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of unreturned ballots (\"Hoe vaak heeft een kiezer het stembiljet niet ingeleverd?\")",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "Election": {
        "type": "object",
        "description": "Election without political groups",
        "required": [
          "id",
          "name",
          "counting_method",
          "election_id",
          "location",
          "domain_id",
          "category",
          "number_of_seats",
          "election_date",
          "nomination_date"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ElectionCategory"
          },
          "counting_method": {
            "$ref": "#/components/schemas/VoteCountingMethod"
          },
          "domain_id": {
            "type": "string"
          },
          "election_date": {
            "type": "string",
            "format": "date"
          },
          "election_id": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nomination_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ElectionAndCandidateDefinitionValidateRequest": {
        "type": "object",
        "required": [
          "election_data"
        ],
        "properties": {
          "candidate_data": {
            "type": [
              "string",
              "null"
            ]
          },
          "candidate_hash": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "counting_method": {
            "$ref": "#/components/schemas/VoteCountingMethod"
          },
          "election_data": {
            "type": "string"
          },
          "election_hash": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_station_data": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ElectionAndCandidatesDefinitionImportRequest": {
        "type": "object",
        "required": [
          "election_hash",
          "election_data",
          "candidate_hash",
          "candidate_data"
        ],
        "properties": {
          "candidate_data": {
            "type": "string"
          },
          "candidate_hash": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "counting_method": {
            "$ref": "#/components/schemas/VoteCountingMethod"
          },
          "election_data": {
            "type": "string"
          },
          "election_hash": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_station_data": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ElectionApportionmentResponse": {
        "type": "object",
        "description": "Election apportionment response, including the seat assignment, candidate nomination and election summary",
        "required": [
          "seat_assignment",
          "candidate_nomination",
          "election_summary"
        ],
        "properties": {
          "candidate_nomination": {
            "$ref": "#/components/schemas/CandidateNominationResult"
          },
          "election_summary": {
            "$ref": "#/components/schemas/ElectionSummary"
          },
          "seat_assignment": {
            "$ref": "#/components/schemas/SeatAssignmentResult"
          }
        },
        "additionalProperties": false
      },
      "ElectionCategory": {
        "type": "string",
        "description": "Election category (limited for now)",
        "enum": [
          "Municipal"
        ]
      },
      "ElectionDefinitionValidateResponse": {
        "type": "object",
        "required": [
          "hash",
          "election",
          "number_of_voters"
        ],
        "properties": {
          "election": {
            "$ref": "#/components/schemas/NewElection"
          },
          "hash": {
            "$ref": "#/components/schemas/RedactedEmlHash"
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingStationRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "ElectionDetails": {
        "type": "object",
        "required": [
          "electionId",
          "electionName",
          "electionCountingMethod",
          "electionElectionId",
          "electionLocation",
          "electionDomainId",
          "electionCategory",
          "electionNumberOfSeats",
          "electionElectionDate",
          "electionNominationDate"
        ],
        "properties": {
          "electionCategory": {
            "type": "string"
          },
          "electionCountingMethod": {
            "type": "string"
          },
          "electionDomainId": {
            "type": "string"
          },
          "electionElectionDate": {
            "type": "string",
            "format": "date"
          },
          "electionElectionId": {
            "type": "string"
          },
          "electionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "electionLocation": {
            "type": "string"
          },
          "electionName": {
            "type": "string"
          },
          "electionNominationDate": {
            "type": "string",
            "format": "date"
          },
          "electionNumberOfSeats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ElectionDetailsResponse": {
        "type": "object",
        "description": "Election details response, including the election's candidate list (political groups),\nits polling stations and the current committee session",
        "required": [
          "committee_session",
          "election",
          "polling_stations"
        ],
        "properties": {
          "committee_session": {
            "$ref": "#/components/schemas/CommitteeSession"
          },
          "election": {
            "$ref": "#/components/schemas/ElectionWithPoliticalGroups"
          },
          "polling_stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingStation"
            }
          }
        },
        "additionalProperties": false
      },
      "ElectionListResponse": {
        "type": "object",
        "description": "Election list response\n\nAlso includes a list of the current committee session for each election.\nDoes not include the candidate list (political groups) to keep the response size small.",
        "required": [
          "committee_sessions",
          "elections"
        ],
        "properties": {
          "committee_sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitteeSession"
            }
          },
          "elections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Election"
            }
          }
        },
        "additionalProperties": false
      },
      "ElectionStatusResponse": {
        "type": "object",
        "description": "Election polling stations data entry statuses response",
        "required": [
          "statuses"
        ],
        "properties": {
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElectionStatusResponseEntry"
            }
          }
        },
        "additionalProperties": false
      },
      "ElectionStatusResponseEntry": {
        "type": "object",
        "description": "Election polling stations data entry statuses response",
        "required": [
          "polling_station_id",
          "status"
        ],
        "properties": {
          "finished_at": {
            "type": "string",
            "description": "Time when the data entry was finalised"
          },
          "first_entry_progress": {
            "type": "integer",
            "format": "int32",
            "description": "First entry progress as a percentage (0 to 100)",
            "minimum": 0
          },
          "first_entry_user_id": {
            "type": "integer",
            "format": "int32",
            "description": "First entry user id",
            "minimum": 0
          },
          "polling_station_id": {
            "type": "integer",
            "format": "int32",
            "description": "Polling station id",
            "minimum": 0
          },
          "second_entry_progress": {
            "type": "integer",
            "format": "int32",
            "description": "Second entry progress as a percentage (0 to 100)",
            "minimum": 0
          },
          "second_entry_user_id": {
            "type": "integer",
            "format": "int32",
            "description": "Second entry user id",
            "minimum": 0
          },
          "status": {
            "$ref": "#/components/schemas/DataEntryStatusName",
            "description": "Data entry status"
          }
        },
        "additionalProperties": false
      },
      "ElectionSummary": {
        "type": "object",
        "description": "Contains a summary of the election results, added up from the votes of all polling stations.",
        "required": [
          "voters_counts",
          "votes_counts",
          "differences_counts",
          "political_group_votes"
        ],
        "properties": {
          "differences_counts": {
            "$ref": "#/components/schemas/SummaryDifferencesCounts",
            "description": "The differences between voters and votes"
          },
          "political_group_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupVotes"
            },
            "description": "The summary votes for each political group (and each candidate within)"
          },
          "voters_counts": {
            "$ref": "#/components/schemas/VotersCounts",
            "description": "The total number of voters"
          },
          "votes_counts": {
            "$ref": "#/components/schemas/VotesCounts",
            "description": "The total number of votes"
          }
        },
        "additionalProperties": false
      },
      "ElectionWithPoliticalGroups": {
        "type": "object",
        "description": "Election with political groups",
        "required": [
          "id",
          "name",
          "counting_method",
          "election_id",
          "location",
          "domain_id",
          "category",
          "number_of_seats",
          "election_date",
          "nomination_date",
          "political_groups"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ElectionCategory"
          },
          "counting_method": {
            "$ref": "#/components/schemas/VoteCountingMethod"
          },
          "domain_id": {
            "type": "string"
          },
          "election_date": {
            "type": "string",
            "format": "date"
          },
          "election_id": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nomination_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "political_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroup"
            }
          }
        },
        "additionalProperties": false
      },
      "ErrorDetails": {
        "type": "object",
        "required": [
          "reference",
          "path",
          "level"
        ],
        "properties": {
          "level": {
            "$ref": "#/components/schemas/AuditEventLevel"
          },
          "path": {
            "type": "string"
          },
          "reference": {
            "$ref": "#/components/schemas/ErrorReference"
          }
        },
        "additionalProperties": false
      },
      "ErrorReference": {
        "type": "string",
        "description": "Error reference used to show the corresponding error message to the end-user",
        "enum": [
          "AirgapViolation",
          "NotInitialised",
          "AllListsExhausted",
          "ApportionmentNotAvailableUntilDataEntryFinalised",
          "CommitteeSessionPaused",
          "DatabaseError",
          "DataEntryAlreadyClaimed",
          "DataEntryAlreadyFinalised",
          "DrawingOfLotsRequired",
          "EmlImportError",
          "EntryNotFound",
          "EntryNotUnique",
          "Forbidden",
          "InternalServerError",
          "InvalidCommitteeSessionStatus",
          "InvalidData",
          "InvalidHash",
          "InvalidJson",
          "InvalidPassword",
          "InvalidPoliticalGroup",
          "InvalidSession",
          "InvalidStateTransition",
          "InvalidUsernameOrPassword",
          "InvalidVoteCandidate",
          "InvalidVoteGroup",
          "InvalidXml",
          "OwnAccountCannotBeDeleted",
          "PasswordRejection",
          "PdfGenerationError",
          "PollingStationRepeated",
          "PollingStationValidationErrors",
          "RequestPayloadTooLarge",
          "Unauthorized",
          "UsernameNotUnique",
          "UserNotFound",
          "ZeroVotesCast"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "description": "Response structure for errors",
        "required": [
          "error",
          "fatal",
          "reference"
        ],
        "properties": {
          "error": {
            "type": "string"
          },
          "fatal": {
            "type": "boolean"
          },
          "reference": {
            "$ref": "#/components/schemas/ErrorReference"
          }
        },
        "additionalProperties": false
      },
      "ExtraInvestigation": {
        "type": "object",
        "description": "Extra investigation, part of the polling station results (\"B1-1 Extra onderzoek\")",
        "required": [
          "extra_investigation_other_reason",
          "ballots_recounted_extra_investigation"
        ],
        "properties": {
          "ballots_recounted_extra_investigation": {
            "$ref": "#/components/schemas/YesNo",
            "description": "Whether ballots were (partially) recounted following the extra investigation\n(\"Zijn de stembiljetten naar aanleiding van het extra onderzoek (gedeeltelijk) herteld?\")"
          },
          "extra_investigation_other_reason": {
            "$ref": "#/components/schemas/YesNo",
            "description": "Whether extra investigation was done for another reason than an unexplained difference\n(\"Heeft het gemeentelijk stembureau extra onderzoek gedaan vanwege een andere reden dan een onverklaard verschil?\")"
          }
        },
        "additionalProperties": false
      },
      "Fraction": {
        "type": "object",
        "description": "Fraction with the integer part split out for display purposes",
        "required": [
          "integer",
          "numerator",
          "denominator"
        ],
        "properties": {
          "denominator": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "integer": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "numerator": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "HighestAverageAssignedSeat": {
        "type": "object",
        "description": "Contains the details for an assigned seat, assigned through the highest average method.",
        "required": [
          "selected_pg_number",
          "pg_options",
          "pg_assigned",
          "pg_exhausted",
          "votes_per_seat"
        ],
        "properties": {
          "pg_assigned": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same average, that have been assigned a seat"
          },
          "pg_exhausted": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups that are exhausted, and will not be assigned a seat"
          },
          "pg_options": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same average, that have not been assigned a seat"
          },
          "selected_pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "The political group that was selected for this seat has this political group number",
            "minimum": 0
          },
          "votes_per_seat": {
            "$ref": "#/components/schemas/Fraction",
            "description": "This is the votes per seat achieved by the selected political group"
          }
        },
        "additionalProperties": false
      },
      "LargestRemainderAssignedSeat": {
        "type": "object",
        "description": "Contains the details for an assigned seat, assigned through the largest remainder method.",
        "required": [
          "selected_pg_number",
          "pg_options",
          "pg_assigned",
          "remainder_votes"
        ],
        "properties": {
          "pg_assigned": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same remainder, that have been assigned a seat"
          },
          "pg_options": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            },
            "description": "The list of political groups with the same remainder, that have not been assigned a seat"
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The number of remainder votes achieved by the selected political group"
          },
          "selected_pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "The political group that was selected for this seat has this political group number",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "ListExhaustionRemovedSeat": {
        "type": "object",
        "description": "Contains information about the enactment of article P 10 of the Kieswet.",
        "required": [
          "pg_retracted_seat",
          "full_seat"
        ],
        "properties": {
          "full_seat": {
            "type": "boolean",
            "description": "Whether the removed seat was a full seat"
          },
          "pg_retracted_seat": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number which the seat is retracted from",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "required": [
          "user_id",
          "username",
          "role",
          "needs_password_change"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "needs_password_change": {
            "type": "boolean"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "user_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "NewElection": {
        "type": "object",
        "description": "Election request",
        "required": [
          "name",
          "counting_method",
          "election_id",
          "location",
          "domain_id",
          "category",
          "number_of_seats",
          "election_date",
          "nomination_date",
          "political_groups"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/ElectionCategory"
          },
          "counting_method": {
            "$ref": "#/components/schemas/VoteCountingMethod"
          },
          "domain_id": {
            "type": "string"
          },
          "election_date": {
            "type": "string",
            "format": "date"
          },
          "election_id": {
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "nomination_date": {
            "type": "string",
            "format": "date"
          },
          "number_of_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "political_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroup"
            }
          }
        },
        "additionalProperties": false
      },
      "PoliticalGroup": {
        "type": "object",
        "description": "Political group with its candidates",
        "required": [
          "number",
          "name",
          "candidates"
        ],
        "properties": {
          "candidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            }
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "PoliticalGroupCandidateNomination": {
        "type": "object",
        "description": "Contains information about the chosen candidates and the candidate list ranking\nfor a specific political group.",
        "required": [
          "pg_number",
          "pg_name",
          "pg_seats",
          "preferential_candidate_nomination",
          "other_candidate_nomination",
          "updated_candidate_ranking"
        ],
        "properties": {
          "other_candidate_nomination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateVotes"
            },
            "description": "The list of other chosen candidates, can be empty"
          },
          "pg_name": {
            "type": "string",
            "description": "Political group name for which this nomination applies"
          },
          "pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number for which this nomination applies",
            "minimum": 0
          },
          "pg_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The number of seats assigned to this group",
            "minimum": 0
          },
          "preferential_candidate_nomination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateVotes"
            },
            "description": "The list of chosen candidates via preferential votes, can be empty"
          },
          "updated_candidate_ranking": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Candidate"
            },
            "description": "The updated ranking of the whole candidate list, can be empty"
          }
        },
        "additionalProperties": false
      },
      "PoliticalGroupSeatAssignment": {
        "type": "object",
        "description": "Contains information about the final assignment of seats for a specific political group.",
        "required": [
          "pg_number",
          "votes_cast",
          "remainder_votes",
          "meets_remainder_threshold",
          "full_seats",
          "residual_seats",
          "total_seats"
        ],
        "properties": {
          "full_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The number of full seats assigned to this group",
            "minimum": 0
          },
          "meets_remainder_threshold": {
            "type": "boolean",
            "description": "Whether this group met the threshold for largest remainder seat assignment"
          },
          "pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number for which this assignment applies",
            "minimum": 0
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The remainder votes that were not used to get full seats assigned to this political group"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The number of residual seats assigned to this group",
            "minimum": 0
          },
          "total_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of seats assigned to this group",
            "minimum": 0
          },
          "votes_cast": {
            "type": "integer",
            "format": "int64",
            "description": "The number of votes cast for this group",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "PoliticalGroupStanding": {
        "type": "object",
        "description": "Contains the standing for a specific political group. This is all the information\nthat is needed to compute the apportionment for that specific political group.",
        "required": [
          "pg_number",
          "votes_cast",
          "remainder_votes",
          "meets_remainder_threshold",
          "next_votes_per_seat",
          "full_seats",
          "residual_seats"
        ],
        "properties": {
          "full_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The number of full seats this political group got assigned",
            "minimum": 0
          },
          "meets_remainder_threshold": {
            "type": "boolean",
            "description": "Whether the remainder votes meet the threshold to be applicable for largest remainder seat assignment"
          },
          "next_votes_per_seat": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The number of votes per seat if a new seat would be added to the current residual seats"
          },
          "pg_number": {
            "type": "integer",
            "format": "int32",
            "description": "Political group number for which this standing applies",
            "minimum": 0
          },
          "remainder_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "The remainder of votes that was not used to get full seats (does not have to be a whole number of votes)"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int32",
            "description": "The current number of residual seats this political group got assigned",
            "minimum": 0
          },
          "votes_cast": {
            "type": "integer",
            "format": "int64",
            "description": "The number of votes cast for this group",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "PoliticalGroupVotes": {
        "type": "object",
        "required": [
          "number",
          "total",
          "candidate_votes"
        ],
        "properties": {
          "candidate_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CandidateVotes"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "PollingStation": {
        "type": "object",
        "description": "Polling station of a certain [crate::election::Election]",
        "required": [
          "id",
          "election_id",
          "name",
          "number",
          "address",
          "postal_code",
          "locality"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "election_id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "locality": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int64"
          },
          "polling_station_type": {
            "$ref": "#/components/schemas/PollingStationType"
          },
          "postal_code": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PollingStationDetails": {
        "type": "object",
        "required": [
          "pollingStationId",
          "pollingStationElectionId",
          "pollingStationName",
          "pollingStationNumber",
          "pollingStationAddress",
          "pollingStationPostalCode",
          "pollingStationLocality"
        ],
        "properties": {
          "pollingStationAddress": {
            "type": "string"
          },
          "pollingStationElectionId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "pollingStationId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "pollingStationLocality": {
            "type": "string"
          },
          "pollingStationName": {
            "type": "string"
          },
          "pollingStationNumber": {
            "type": "integer",
            "format": "int64"
          },
          "pollingStationNumberOfVoters": {
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "pollingStationPostalCode": {
            "type": "string"
          },
          "pollingStationType": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PollingStationListResponse": {
        "type": "object",
        "description": "Polling station list response",
        "required": [
          "polling_stations"
        ],
        "properties": {
          "polling_stations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PollingStation"
            }
          }
        },
        "additionalProperties": false
      },
      "PollingStationRequest": {
        "type": "object",
        "description": "Polling station of a certain [crate::election::Election]",
        "required": [
          "name",
          "number",
          "address",
          "postal_code",
          "locality"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "locality": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "number": {
            "type": "integer",
            "format": "int64"
          },
          "number_of_voters": {
            "type": "integer",
            "format": "int64"
          },
          "polling_station_type": {
            "$ref": "#/components/schemas/PollingStationType"
          },
          "postal_code": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PollingStationResults": {
        "type": "object",
        "description": "PollingStationResults, following the fields in Model Na 31-2 Bijlage 2.\n\nSee \"Model Na 31-2. Proces-verbaal van een gemeentelijk stembureau/stembureau voor het openbaar\nlichaam in een gemeente/openbaar lichaam waar een centrale stemopneming wordt verricht,\nBijlage 2: uitkomsten per stembureau\" from the\n[Kiesregeling](https://wetten.overheid.nl/BWBR0034180/2024-04-01#Bijlage1_DivisieNa31.2) or\n[Verkiezingstoolbox](https://www.rijksoverheid.nl/onderwerpen/verkiezingen/verkiezingentoolkit/modellen).",
        "required": [
          "extra_investigation",
          "voters_counts",
          "votes_counts",
          "differences_counts",
          "political_group_votes"
        ],
        "properties": {
          "differences_counts": {
            "$ref": "#/components/schemas/DifferencesCounts",
            "description": "Differences counts (\"3. Verschil tussen het aantal toegelaten kiezers en het aantal getelde stembiljetten\")"
          },
          "extra_investigation": {
            "$ref": "#/components/schemas/ExtraInvestigation",
            "description": "Extra investigation (\"B1-1 Extra onderzoek\")"
          },
          "political_group_votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupVotes"
            },
            "description": "Vote counts per list and candidate (5. \"Aantal stemmen per lijst en kandidaat\")"
          },
          "voters_counts": {
            "$ref": "#/components/schemas/VotersCounts",
            "description": "Voters counts (\"1. Aantal toegelaten kiezers\")"
          },
          "votes_counts": {
            "$ref": "#/components/schemas/VotesCounts",
            "description": "Votes counts (\"2. Aantal getelde stembiljetten\")"
          }
        },
        "additionalProperties": false
      },
      "PollingStationType": {
        "type": "string",
        "description": "Type of Polling station",
        "enum": [
          "FixedLocation",
          "Special",
          "Mobile"
        ]
      },
      "PreferenceThreshold": {
        "type": "object",
        "required": [
          "percentage",
          "number_of_votes"
        ],
        "properties": {
          "number_of_votes": {
            "$ref": "#/components/schemas/Fraction",
            "description": "Preference threshold as a number of votes"
          },
          "percentage": {
            "type": "integer",
            "format": "int64",
            "description": "Preference threshold as a percentage (0 to 100)",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "RedactedEmlHash": {
        "type": "object",
        "required": [
          "chunks",
          "redacted_indexes"
        ],
        "properties": {
          "chunks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array holding the hash chunks as text"
          },
          "redacted_indexes": {
            "type": "array",
            "items": {
              "type": "integer",
              "minimum": 0
            },
            "description": "Indexes of chunks that will be empty, sorted"
          }
        }
      },
      "ResolveDifferencesAction": {
        "type": "string",
        "enum": [
          "keep_first_entry",
          "keep_second_entry",
          "discard_both_entries"
        ]
      },
      "ResolveErrorsAction": {
        "type": "string",
        "enum": [
          "discard_first_entry",
          "resume_first_entry"
        ]
      },
      "Role": {
        "type": "string",
        "enum": [
          "administrator",
          "typist",
          "coordinator"
        ]
      },
      "SaveDataEntryResponse": {
        "type": "object",
        "description": "Response structure for saving data entry of polling station results",
        "required": [
          "validation_results"
        ],
        "properties": {
          "validation_results": {
            "$ref": "#/components/schemas/ValidationResults"
          }
        },
        "additionalProperties": false
      },
      "SeatAssignmentResult": {
        "type": "object",
        "description": "The result of the seat assignment procedure. This contains the number of seats and the quota\nthat was used. It then contains the initial standing after full seats were assigned,\nand each of the changes and intermediate standings. The final standing contains the\nnumber of seats per political group that was assigned after all seats were assigned.",
        "required": [
          "seats",
          "full_seats",
          "residual_seats",
          "quota",
          "steps",
          "final_standing"
        ],
        "properties": {
          "final_standing": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupSeatAssignment"
            }
          },
          "full_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "quota": {
            "$ref": "#/components/schemas/Fraction"
          },
          "residual_seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "seats": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SeatChangeStep"
            }
          }
        },
        "additionalProperties": false
      },
      "SeatChange": {
        "oneOf": [
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighestAverageAssignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "changed_by"
                ],
                "properties": {
                  "changed_by": {
                    "type": "string",
                    "enum": [
                      "HighestAverageAssignment"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/HighestAverageAssignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "changed_by"
                ],
                "properties": {
                  "changed_by": {
                    "type": "string",
                    "enum": [
                      "UniqueHighestAverageAssignment"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/LargestRemainderAssignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "changed_by"
                ],
                "properties": {
                  "changed_by": {
                    "type": "string",
                    "enum": [
                      "LargestRemainderAssignment"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/AbsoluteMajorityReassignedSeat"
              },
              {
                "type": "object",
                "required": [
                  "changed_by"
                ],
                "properties": {
                  "changed_by": {
                    "type": "string",
                    "enum": [
                      "AbsoluteMajorityReassignment"
                    ]
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListExhaustionRemovedSeat"
              },
              {
                "type": "object",
                "required": [
                  "changed_by"
                ],
                "properties": {
                  "changed_by": {
                    "type": "string",
                    "enum": [
                      "ListExhaustionRemoval"
                    ]
                  }
                }
              }
            ]
          }
        ],
        "description": "Records the political group and specific change for a specific residual seat"
      },
      "SeatChangeStep": {
        "type": "object",
        "description": "Records the change for a specific seat, and how the standing is once\nthat seat was assigned or removed",
        "required": [
          "change",
          "standings"
        ],
        "properties": {
          "change": {
            "$ref": "#/components/schemas/SeatChange"
          },
          "residual_seat_number": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "standings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PoliticalGroupStanding"
            }
          }
        },
        "additionalProperties": false
      },
      "SumCount": {
        "type": "object",
        "description": "Contains a summary count, containing both the count and a list of polling\nstations that contributed to it.",
        "required": [
          "count",
          "polling_stations"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "polling_stations": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "additionalProperties": false
      },
      "SummaryDifferencesCounts": {
        "type": "object",
        "description": "Contains a summary of the differences, containing which polling stations had differences.",
        "required": [
          "more_ballots_count",
          "fewer_ballots_count",
          "unreturned_ballots_count",
          "too_few_ballots_handed_out_count",
          "too_many_ballots_handed_out_count",
          "other_explanation_count",
          "no_explanation_count"
        ],
        "properties": {
          "fewer_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "more_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "no_explanation_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "other_explanation_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "too_few_ballots_handed_out_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "too_many_ballots_handed_out_count": {
            "$ref": "#/components/schemas/SumCount"
          },
          "unreturned_ballots_count": {
            "$ref": "#/components/schemas/SumCount"
          }
        },
        "additionalProperties": false
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "fullname": {
            "type": "string"
          },
          "temp_password": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "User": {
        "type": "object",
        "description": "User object, corresponds to a row in the users table",
        "required": [
          "id",
          "username",
          "role",
          "updated_at",
          "created_at"
        ],
        "properties": {
          "created_at": {
            "type": "string"
          },
          "fullname": {
            "type": "string"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "last_activity_at": {
            "type": "string"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          },
          "updated_at": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        }
      },
      "UserDetails": {
        "type": "object",
        "required": [
          "userId",
          "username",
          "role"
        ],
        "properties": {
          "fullname": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserListResponse": {
        "type": "object",
        "required": [
          "users"
        ],
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          }
        },
        "additionalProperties": false
      },
      "UserLoggedInDetails": {
        "type": "object",
        "required": [
          "userAgent",
          "loggedInUsersCount"
        ],
        "properties": {
          "loggedInUsersCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "userAgent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "UserLoggedOutDetails": {
        "type": "object",
        "required": [
          "sessionDuration"
        ],
        "properties": {
          "sessionDuration": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "UserLoginFailedDetails": {
        "type": "object",
        "required": [
          "username",
          "userAgent"
        ],
        "properties": {
          "userAgent": {
            "type": "string"
          },
          "username": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ValidationResult": {
        "type": "object",
        "required": [
          "fields",
          "code"
        ],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ValidationResultCode"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "ValidationResultCode": {
        "type": "string",
        "enum": [
          "F201",
          "F202",
          "F204",
          "F301",
          "F302",
          "F303",
          "F304",
          "F305",
          "F401",
          "F402",
          "W001",
          "W201",
          "W202",
          "W203",
          "W205",
          "W301",
          "W302"
        ]
      },
      "ValidationResults": {
        "type": "object",
        "required": [
          "errors",
          "warnings"
        ],
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResult"
            }
          },
          "warnings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationResult"
            }
          }
        },
        "additionalProperties": false
      },
      "VoteCountingMethod": {
        "type": "string",
        "enum": [
          "CSO",
          "DSO"
        ]
      },
      "VotersCounts": {
        "type": "object",
        "description": "Voters counts, part of the polling station results.",
        "required": [
          "poll_card_count",
          "proxy_certificate_count",
          "total_admitted_voters_count"
        ],
        "properties": {
          "poll_card_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid poll cards (\"Aantal geldige stempassen\")",
            "minimum": 0
          },
          "proxy_certificate_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid proxy certificates (\"Aantal geldige volmachtbewijzen\")",
            "minimum": 0
          },
          "total_admitted_voters_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of admitted voters (\"Totaal aantal toegelaten kiezers\")",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "VotesCounts": {
        "type": "object",
        "description": "Votes counts, part of the polling station results.",
        "required": [
          "votes_candidates_count",
          "blank_votes_count",
          "invalid_votes_count",
          "total_votes_cast_count"
        ],
        "properties": {
          "blank_votes_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of blank votes (\"Aantal blanco stembiljetten\")",
            "minimum": 0
          },
          "invalid_votes_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of invalid votes (\"Aantal ongeldige stembiljetten\")",
            "minimum": 0
          },
          "total_votes_cast_count": {
            "type": "integer",
            "format": "int32",
            "description": "Total number of votes cast (\"Totaal aantal getelde stemmen\")",
            "minimum": 0
          },
          "votes_candidates_count": {
            "type": "integer",
            "format": "int32",
            "description": "Number of valid votes on candidates\n(\"Aantal stembiljetten met een geldige stem op een kandidaat\")",
            "minimum": 0
          }
        },
        "additionalProperties": false
      },
      "YesNo": {
        "type": "object",
        "description": "Yes/No response structure for boolean questions with separate yes and no fields.",
        "required": [
          "yes",
          "no"
        ],
        "properties": {
          "no": {
            "type": "boolean"
          },
          "yes": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  }
}