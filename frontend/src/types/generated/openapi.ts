// Generated by ./scripts/gen_openapi_types.ts

/** PATHS **/

// /api/committee_sessions
export type COMMITTEE_SESSION_CREATE_REQUEST_PARAMS = Record<string, never>;
export type COMMITTEE_SESSION_CREATE_REQUEST_PATH = `/api/committee_sessions`;
export type COMMITTEE_SESSION_CREATE_REQUEST_BODY = CommitteeSessionCreateRequest;

// /api/committee_sessions/{committee_session_id}
export interface COMMITTEE_SESSION_UPDATE_REQUEST_PARAMS {
  committee_session_id: number;
}
export type COMMITTEE_SESSION_UPDATE_REQUEST_PATH = `/api/committee_sessions/${number}`;
export type COMMITTEE_SESSION_UPDATE_REQUEST_BODY = CommitteeSessionUpdateRequest;

// /api/committee_sessions/{committee_session_id}/status
export interface COMMITTEE_SESSION_STATUS_CHANGE_REQUEST_PARAMS {
  committee_session_id: number;
}
export type COMMITTEE_SESSION_STATUS_CHANGE_REQUEST_PATH = `/api/committee_sessions/${number}/status`;
export type COMMITTEE_SESSION_STATUS_CHANGE_REQUEST_BODY = CommitteeSessionStatusChangeRequest;

// /api/elections
export type ELECTION_LIST_REQUEST_PARAMS = Record<string, never>;
export type ELECTION_LIST_REQUEST_PATH = `/api/elections`;
export type ELECTION_CREATE_REQUEST_PARAMS = Record<string, never>;
export type ELECTION_CREATE_REQUEST_PATH = `/api/elections`;
export type ELECTION_CREATE_REQUEST_BODY = NewElection;

// /api/elections/import
export type ELECTION_IMPORT_REQUEST_PARAMS = Record<string, never>;
export type ELECTION_IMPORT_REQUEST_PATH = `/api/elections/import`;
export type ELECTION_IMPORT_REQUEST_BODY = ElectionAndCandidatesDefinitionImportRequest;

// /api/elections/import/validate
export type ELECTION_IMPORT_VALIDATE_REQUEST_PARAMS = Record<string, never>;
export type ELECTION_IMPORT_VALIDATE_REQUEST_PATH = `/api/elections/import/validate`;
export type ELECTION_IMPORT_VALIDATE_REQUEST_BODY = ElectionAndCandidateDefinitionValidateRequest;

// /api/elections/{election_id}
export interface ELECTION_DETAILS_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_DETAILS_REQUEST_PATH = `/api/elections/${number}`;

// /api/elections/{election_id}/apportionment
export interface ELECTION_APPORTIONMENT_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_APPORTIONMENT_REQUEST_PATH = `/api/elections/${number}/apportionment`;

// /api/elections/{election_id}/committee_sessions
export interface ELECTION_COMMITTEE_SESSION_LIST_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_COMMITTEE_SESSION_LIST_REQUEST_PATH = `/api/elections/${number}/committee_sessions`;

// /api/elections/{election_id}/download_pdf_results
export interface ELECTION_DOWNLOAD_PDF_RESULTS_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_DOWNLOAD_PDF_RESULTS_REQUEST_PATH = `/api/elections/${number}/download_pdf_results`;

// /api/elections/{election_id}/download_xml_results
export interface ELECTION_DOWNLOAD_XML_RESULTS_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_DOWNLOAD_XML_RESULTS_REQUEST_PATH = `/api/elections/${number}/download_xml_results`;

// /api/elections/{election_id}/download_zip_results
export interface ELECTION_DOWNLOAD_ZIP_RESULTS_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_DOWNLOAD_ZIP_RESULTS_REQUEST_PATH = `/api/elections/${number}/download_zip_results`;

// /api/elections/{election_id}/polling_stations
export interface POLLING_STATION_LIST_REQUEST_PARAMS {
  election_id: number;
}
export type POLLING_STATION_LIST_REQUEST_PATH = `/api/elections/${number}/polling_stations`;
export interface POLLING_STATION_CREATE_REQUEST_PARAMS {
  election_id: number;
}
export type POLLING_STATION_CREATE_REQUEST_PATH = `/api/elections/${number}/polling_stations`;
export type POLLING_STATION_CREATE_REQUEST_BODY = PollingStationRequest;

// /api/elections/{election_id}/polling_stations/{polling_station_id}
export interface POLLING_STATION_GET_REQUEST_PARAMS {
  election_id: number;
  polling_station_id: number;
}
export type POLLING_STATION_GET_REQUEST_PATH = `/api/elections/${number}/polling_stations/${number}`;
export interface POLLING_STATION_UPDATE_REQUEST_PARAMS {
  election_id: number;
  polling_station_id: number;
}
export type POLLING_STATION_UPDATE_REQUEST_PATH = `/api/elections/${number}/polling_stations/${number}`;
export type POLLING_STATION_UPDATE_REQUEST_BODY = PollingStationRequest;
export interface POLLING_STATION_DELETE_REQUEST_PARAMS {
  election_id: number;
  polling_station_id: number;
}
export type POLLING_STATION_DELETE_REQUEST_PATH = `/api/elections/${number}/polling_stations/${number}`;

// /api/elections/{election_id}/status
export interface ELECTION_STATUS_REQUEST_PARAMS {
  election_id: number;
}
export type ELECTION_STATUS_REQUEST_PATH = `/api/elections/${number}/status`;

// /api/log
export interface AUDIT_LOG_LIST_REQUEST_PARAMS {
  page: number;
  perPage: number;
  level: string[];
  event: string[];
  user: number[];
  since: number | null;
}
export type AUDIT_LOG_LIST_REQUEST_PATH = `/api/log`;

// /api/log-users
export type AUDIT_LOG_LIST_USERS_REQUEST_PARAMS = Record<string, never>;
export type AUDIT_LOG_LIST_USERS_REQUEST_PATH = `/api/log-users`;

// /api/polling_stations/{polling_station_id}/data_entries/resolve_differences
export interface POLLING_STATION_DATA_ENTRY_GET_DIFFERENCES_REQUEST_PARAMS {
  polling_station_id: number;
}
export type POLLING_STATION_DATA_ENTRY_GET_DIFFERENCES_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/resolve_differences`;
export interface POLLING_STATION_DATA_ENTRY_RESOLVE_DIFFERENCES_REQUEST_PARAMS {
  polling_station_id: number;
}
export type POLLING_STATION_DATA_ENTRY_RESOLVE_DIFFERENCES_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/resolve_differences`;
export type POLLING_STATION_DATA_ENTRY_RESOLVE_DIFFERENCES_REQUEST_BODY = ResolveDifferencesAction;

// /api/polling_stations/{polling_station_id}/data_entries/resolve_errors
export interface POLLING_STATION_DATA_ENTRY_GET_ERRORS_REQUEST_PARAMS {
  polling_station_id: number;
}
export type POLLING_STATION_DATA_ENTRY_GET_ERRORS_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/resolve_errors`;
export interface POLLING_STATION_DATA_ENTRY_RESOLVE_ERRORS_REQUEST_PARAMS {
  polling_station_id: number;
}
export type POLLING_STATION_DATA_ENTRY_RESOLVE_ERRORS_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/resolve_errors`;
export type POLLING_STATION_DATA_ENTRY_RESOLVE_ERRORS_REQUEST_BODY = ResolveErrorsAction;

// /api/polling_stations/{polling_station_id}/data_entries/{entry_number}
export interface POLLING_STATION_DATA_ENTRY_SAVE_REQUEST_PARAMS {
  polling_station_id: number;
  entry_number: number;
}
export type POLLING_STATION_DATA_ENTRY_SAVE_REQUEST_PATH = `/api/polling_stations/${number}/data_entries/${number}`;
export type POLLING_STATION_DATA_ENTRY_SAVE_REQUEST_BODY = DataEntry;
export interface POLLING_STATION_DATA_ENTRY_DELETE_REQUEST_PARAMS {
  polling_station_id: number;
  entry_number: number;
}
export type POLLING_STATION_DATA_ENTRY_DELETE_REQUEST_PATH = `/api/polling_stations/${number}/data_entries/${number}`;

// /api/polling_stations/{polling_station_id}/data_entries/{entry_number}/claim
export interface POLLING_STATION_DATA_ENTRY_CLAIM_REQUEST_PARAMS {
  polling_station_id: number;
  entry_number: number;
}
export type POLLING_STATION_DATA_ENTRY_CLAIM_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/${number}/claim`;

// /api/polling_stations/{polling_station_id}/data_entries/{entry_number}/finalise
export interface POLLING_STATION_DATA_ENTRY_FINALISE_REQUEST_PARAMS {
  polling_station_id: number;
  entry_number: number;
}
export type POLLING_STATION_DATA_ENTRY_FINALISE_REQUEST_PATH =
  `/api/polling_stations/${number}/data_entries/${number}/finalise`;

// /api/user
export type USER_LIST_REQUEST_PARAMS = Record<string, never>;
export type USER_LIST_REQUEST_PATH = `/api/user`;
export type USER_CREATE_REQUEST_PARAMS = Record<string, never>;
export type USER_CREATE_REQUEST_PATH = `/api/user`;
export type USER_CREATE_REQUEST_BODY = CreateUserRequest;

// /api/user/account
export type ACCOUNT_UPDATE_REQUEST_PARAMS = Record<string, never>;
export type ACCOUNT_UPDATE_REQUEST_PATH = `/api/user/account`;
export type ACCOUNT_UPDATE_REQUEST_BODY = AccountUpdateRequest;

// /api/user/login
export type LOGIN_REQUEST_PARAMS = Record<string, never>;
export type LOGIN_REQUEST_PATH = `/api/user/login`;
export type LOGIN_REQUEST_BODY = Credentials;

// /api/user/logout
export type LOGOUT_REQUEST_PARAMS = Record<string, never>;
export type LOGOUT_REQUEST_PATH = `/api/user/logout`;

// /api/user/whoami
export type WHOAMI_REQUEST_PARAMS = Record<string, never>;
export type WHOAMI_REQUEST_PATH = `/api/user/whoami`;

// /api/user/{user_id}
export interface USER_GET_REQUEST_PARAMS {
  user_id: number;
}
export type USER_GET_REQUEST_PATH = `/api/user/${number}`;
export interface USER_UPDATE_REQUEST_PARAMS {
  user_id: number;
}
export type USER_UPDATE_REQUEST_PATH = `/api/user/${number}`;
export type USER_UPDATE_REQUEST_BODY = UpdateUserRequest;
export interface USER_DELETE_REQUEST_PARAMS {
  user_id: number;
}
export type USER_DELETE_REQUEST_PATH = `/api/user/${number}`;

/** TYPES **/

/**
 * Contains information about the enactment of article P 9 of the Kieswet.
 */
export interface AbsoluteMajorityReassignedSeat {
  /** Political group number which the residual seat is assigned to */
  pg_assigned_seat: number;
  /** Political group number which the residual seat is retracted from */
  pg_retracted_seat: number;
}

export interface AccountUpdateRequest {
  fullname?: string;
  password: string;
  username: string;
}

export type AuditEvent =
  | (UserLoggedInDetails & { eventType: "UserLoggedIn" })
  | (UserLoggedOutDetails & { eventType: "UserLoggedOut" })
  | (UserDetails & { eventType: "UserAccountUpdated" })
  | { eventType: "UserSessionExtended" }
  | (UserDetails & { eventType: "UserCreated" })
  | (UserDetails & { eventType: "UserUpdated" })
  | (UserDetails & { eventType: "UserDeleted" })
  | (ElectionDetails & { eventType: "ElectionCreated" })
  | (CommitteeSessionDetails & { eventType: "CommitteeSessionCreated" })
  | (CommitteeSessionDetails & { eventType: "CommitteeSessionUpdated" })
  | (ElectionDetails & { eventType: "ApportionmentCreated" })
  | (PollingStationDetails & { eventType: "PollingStationCreated" })
  | (PollingStationDetails & { eventType: "PollingStationUpdated" })
  | (PollingStationDetails & { eventType: "PollingStationDeleted" })
  | (DataEntryDetails & { eventType: "DataEntryClaimed" })
  | (DataEntryDetails & { eventType: "DataEntrySaved" })
  | (DataEntryDetails & { eventType: "DataEntryDeleted" })
  | (DataEntryDetails & { eventType: "DataEntryFinalised" })
  | (DataEntryDetails & { eventType: "DataEntryDiscardedFirst" })
  | (DataEntryDetails & { eventType: "DataEntryResumedFirst" })
  | (DataEntryDetails & { eventType: "DataEntryKeptFirst" })
  | (DataEntryDetails & { eventType: "DataEntryKeptSecond" })
  | (DataEntryDetails & { eventType: "DataEntryDiscardedBoth" })
  | { eventType: "AirGapViolationDetected" }
  | { eventType: "AirGapViolationResolved" }
  | (ErrorDetails & { eventType: "Error" })
  | { eventType: "UnknownEvent" };

export type AuditEventLevel = "info" | "success" | "warning" | "error";

export interface AuditLogEvent {
  event: AuditEvent;
  eventLevel: AuditEventLevel;
  id: number;
  ip: string;
  message?: string;
  time: string;
  userFullname?: string;
  userId?: number;
  userRole?: Role;
  username?: string;
  workstation?: number;
}

export interface AuditLogListResponse {
  events: AuditLogEvent[];
  page: number;
  pages: number;
  perPage: number;
}

export interface AuditLogUser {
  fullname: string;
  id: number;
  role: Role;
  username: string;
}

/**
 * Candidate
 */
export interface Candidate {
  country_code?: string;
  first_name?: string;
  gender?: CandidateGender;
  initials: string;
  last_name: string;
  last_name_prefix?: string;
  locality: string;
  number: number;
}

/**
 * Candidate gender
 */
export type CandidateGender = "Male" | "Female" | "X";

/**
 * The result of the candidate nomination procedure.
 * This contains the preference threshold and percentage that was used.
 * It contains a list of all chosen candidates in alphabetical order.
 * It also contains the preferential nomination of candidates, the remaining
 * nomination of candidates and the final ranking of candidates for each political group.
 */
export interface CandidateNominationResult {
  /** List of chosen candidates in alphabetical order */
  chosen_candidates: Candidate[];
  /** List of chosen candidates and candidate list ranking per political group */
  political_group_candidate_nomination: PoliticalGroupCandidateNomination[];
  /** Preference threshold percentage and number of votes */
  preference_threshold: PreferenceThreshold;
}

export interface CandidateVotes {
  number: number;
  votes: number;
}

/**
 * Response structure for getting data entry of polling station results
 */
export interface ClaimDataEntryResponse {
  client_state: unknown;
  data: PollingStationResults;
  validation_results: ValidationResults;
}

/**
 * Committee session
 */
export interface CommitteeSession {
  election_id: number;
  id: number;
  location: string;
  number: number;
  start_date: string;
  start_time: string;
  status: CommitteeSessionStatus;
}

/**
 * Committee session create request
 */
export interface CommitteeSessionCreateRequest {
  election_id: number;
  number: number;
}

export interface CommitteeSessionDetails {
  sessionElectionId: number;
  sessionId: number;
  sessionLocation: string;
  sessionNumber: number;
  sessionStartDate: string;
  sessionStartTime: string;
  sessionStatus: string;
}

/**
 * Committee session list response
 */
export interface CommitteeSessionListResponse {
  committee_sessions: CommitteeSession[];
}

/**
 * Committee session status
 */
export type CommitteeSessionStatus =
  | "created"
  | "data_entry_not_started"
  | "data_entry_in_progress"
  | "data_entry_paused"
  | "data_entry_finished";

/**
 * Committee session status change request
 */
export interface CommitteeSessionStatusChangeRequest {
  status: CommitteeSessionStatus;
}

/**
 * Committee session update request
 */
export interface CommitteeSessionUpdateRequest {
  location: string;
  start_date: string;
  start_time: string;
}

export interface CreateUserRequest {
  fullname?: string;
  role: Role;
  temp_password: string;
  username: string;
}

export interface Credentials {
  password: string;
  username: string;
}

/**
 * Request structure for saving data entry of polling station results
 */
export interface DataEntry {
  /** Client state for the data entry (arbitrary JSON) */
  client_state: unknown;
  /** Data entry for a polling station */
  data: PollingStationResults;
  /** Data entry progress between 0 and 100 */
  progress: number;
}

export interface DataEntryDetails {
  dataEntryProgress: number;
  dataEntryStatus: string;
  finishedAt?: string | null;
  firstEntryUserId?: number | null;
  pollingStationId: number;
  secondEntryUserId?: number | null;
}

export interface DataEntryGetDifferencesResponse {
  first_entry: PollingStationResults;
  first_entry_user_id: number;
  second_entry: PollingStationResults;
  second_entry_user_id: number;
}

export interface DataEntryGetErrorsResponse {
  finalised_first_entry: PollingStationResults;
  first_entry_finished_at: string;
  first_entry_user_id: number;
  validation_results: ValidationResults;
}

export type DataEntryStatusName =
  | "first_entry_not_started"
  | "first_entry_in_progress"
  | "first_entry_has_errors"
  | "second_entry_not_started"
  | "second_entry_in_progress"
  | "entries_different"
  | "definitive";

export interface DataEntryStatusResponse {
  status: DataEntryStatusName;
}

/**
 * Differences counts, part of the polling station results.
 */
export interface DifferencesCounts {
  /** Number of fewer counted ballots ("Er zijn minder stembiljetten geteld. Hoeveel stembiljetten zijn er minder geteld") */
  fewer_ballots_count: number;
  /** Number of more counted ballots ("Er zijn méér stembiljetten geteld. Hoeveel stembiljetten zijn er meer geteld?") */
  more_ballots_count: number;
  /** Number of no explanations ("Hoe vaak is er geen verklaring voor het verschil?") */
  no_explanation_count: number;
  /** Number of other explanations ("Hoe vaak is er een andere verklaring voor het verschil?") */
  other_explanation_count: number;
  /** Number of fewer ballots handed out ("Hoe vaak is er een stembiljet te weinig uitgereikt?") */
  too_few_ballots_handed_out_count: number;
  /** Number of more ballots handed out ("Hoe vaak is er een stembiljet te veel uitgereikt?") */
  too_many_ballots_handed_out_count: number;
  /** Number of unreturned ballots ("Hoe vaak heeft een kiezer het stembiljet niet ingeleverd?") */
  unreturned_ballots_count: number;
}

/**
 * Election without political groups
 */
export interface Election {
  category: ElectionCategory;
  counting_method: VoteCountingMethod;
  domain_id: string;
  election_date: string;
  election_id: string;
  id: number;
  location: string;
  name: string;
  nomination_date: string;
  number_of_seats: number;
  number_of_voters: number;
}

export interface ElectionAndCandidateDefinitionValidateRequest {
  candidate_data?: string | null;
  candidate_hash?: string[];
  election_data: string;
  election_hash?: string[];
}

export interface ElectionAndCandidatesDefinitionImportRequest {
  candidate_data: string;
  candidate_hash: string[];
  election_data: string;
  election_hash: string[];
}

/**
 * Election apportionment response, including the seat assignment, candidate nomination and election summary
 */
export interface ElectionApportionmentResponse {
  candidate_nomination: CandidateNominationResult;
  election_summary: ElectionSummary;
  seat_assignment: SeatAssignmentResult;
}

/**
 * Election category (limited for now)
 */
export type ElectionCategory = "Municipal";

export interface ElectionDefinitionValidateResponse {
  election: NewElection;
  hash: RedactedEmlHash;
}

export interface ElectionDetails {
  electionCategory: string;
  electionCountingMethod: string;
  electionDomainId: string;
  electionElectionDate: string;
  electionElectionId: string;
  electionId: number;
  electionLocation: string;
  electionName: string;
  electionNominationDate: string;
  electionNumberOfSeats: number;
  electionNumberOfVoters: number;
}

/**
 * Election details response, including the election's candidate list (political groups),
 * its polling stations and the current committee session
 */
export interface ElectionDetailsResponse {
  committee_session: CommitteeSession;
  election: ElectionWithPoliticalGroups;
  polling_stations: PollingStation[];
}

/**
 * Election list response
 *
 * Also includes a list of the current committee session for each election.
 * Does not include the candidate list (political groups) to keep the response size small.
 */
export interface ElectionListResponse {
  committee_sessions: CommitteeSession[];
  elections: Election[];
}

/**
 * Election polling stations data entry statuses response
 */
export interface ElectionStatusResponse {
  statuses: ElectionStatusResponseEntry[];
}

/**
 * Election polling stations data entry statuses response
 */
export interface ElectionStatusResponseEntry {
  /** Time when the data entry was finalised */
  finished_at?: string;
  /** First entry progress as a percentage (0 to 100) */
  first_entry_progress?: number;
  /** First entry user id */
  first_entry_user_id?: number;
  /** Polling station id */
  polling_station_id: number;
  /** Second entry progress as a percentage (0 to 100) */
  second_entry_progress?: number;
  /** Second entry user id */
  second_entry_user_id?: number;
  /** Data entry status */
  status: DataEntryStatusName;
}

/**
 * Contains a summary of the election results, added up from the votes of all polling stations.
 */
export interface ElectionSummary {
  /** The differences between voters and votes */
  differences_counts: SummaryDifferencesCounts;
  /** The summary votes for each political group (and each candidate within) */
  political_group_votes: PoliticalGroupVotes[];
  /** The total number of voters */
  voters_counts: VotersCounts;
  /** The total number of votes */
  votes_counts: VotesCounts;
}

/**
 * Election with political groups
 */
export interface ElectionWithPoliticalGroups {
  category: ElectionCategory;
  counting_method: VoteCountingMethod;
  domain_id: string;
  election_date: string;
  election_id: string;
  id: number;
  location: string;
  name: string;
  nomination_date: string;
  number_of_seats: number;
  number_of_voters: number;
  political_groups: PoliticalGroup[];
}

export interface ErrorDetails {
  level: AuditEventLevel;
  path: string;
  reference: ErrorReference;
}

/**
 * Error reference used to show the corresponding error message to the end-user
 */
export type ErrorReference =
  | "AirgapViolation"
  | "AllListsExhausted"
  | "ApportionmentNotAvailableUntilDataEntryFinalised"
  | "CommitteeSessionNotFinalised"
  | "CommitteeSessionNotInProgress"
  | "DatabaseError"
  | "DataEntryAlreadyClaimed"
  | "DataEntryAlreadyFinalised"
  | "DrawingOfLotsRequired"
  | "EmlImportError"
  | "EntryNotFound"
  | "EntryNotUnique"
  | "InternalServerError"
  | "InvalidData"
  | "InvalidHash"
  | "InvalidJson"
  | "InvalidPassword"
  | "InvalidPoliticalGroup"
  | "InvalidSession"
  | "InvalidStateTransition"
  | "InvalidUsernameOrPassword"
  | "InvalidVoteCandidate"
  | "InvalidVoteGroup"
  | "InvalidXml"
  | "PasswordRejection"
  | "PdfGenerationError"
  | "PollingStationRepeated"
  | "PollingStationValidationErrors"
  | "RequestPayloadTooLarge"
  | "Forbidden"
  | "Unauthorized"
  | "UsernameNotUnique"
  | "UserNotFound"
  | "ZeroVotesCast";

/**
 * Response structure for errors
 */
export interface ErrorResponse {
  error: string;
  fatal: boolean;
  reference: ErrorReference;
}

/**
 * Fraction with the integer part split out for display purposes
 */
export interface Fraction {
  denominator: number;
  integer: number;
  numerator: number;
}

/**
 * Contains the details for an assigned seat, assigned through the highest average method.
 */
export interface HighestAverageAssignedSeat {
  /** The list of political groups with the same average, that have been assigned a seat */
  pg_assigned: number[];
  /** The list of political groups that are exhausted, and will not be assigned a seat */
  pg_exhausted: number[];
  /** The list of political groups with the same average, that have not been assigned a seat */
  pg_options: number[];
  /** The political group that was selected for this seat has this political group number */
  selected_pg_number: number;
  /** This is the votes per seat achieved by the selected political group */
  votes_per_seat: Fraction;
}

/**
 * Contains the details for an assigned seat, assigned through the largest remainder method.
 */
export interface LargestRemainderAssignedSeat {
  /** The list of political groups with the same remainder, that have been assigned a seat */
  pg_assigned: number[];
  /** The list of political groups with the same remainder, that have not been assigned a seat */
  pg_options: number[];
  /** The number of remainder votes achieved by the selected political group */
  remainder_votes: Fraction;
  /** The political group that was selected for this seat has this political group number */
  selected_pg_number: number;
}

/**
 * Contains information about the enactment of article P 10 of the Kieswet.
 */
export interface ListExhaustionRemovedSeat {
  /** Whether the removed seat was a full seat */
  full_seat: boolean;
  /** Political group number which the seat is retracted from */
  pg_retracted_seat: number;
}

export interface LoginResponse {
  fullname?: string;
  needs_password_change: boolean;
  role: Role;
  user_id: number;
  username: string;
}

/**
 * Election request
 */
export interface NewElection {
  category: ElectionCategory;
  counting_method: VoteCountingMethod;
  domain_id: string;
  election_date: string;
  election_id: string;
  location: string;
  name: string;
  nomination_date: string;
  number_of_seats: number;
  number_of_voters: number;
  political_groups: PoliticalGroup[];
}

/**
 * Political group with its candidates
 */
export interface PoliticalGroup {
  candidates: Candidate[];
  name: string;
  number: number;
}

/**
 * Contains information about the chosen candidates and the candidate list ranking
 * for a specific political group.
 */
export interface PoliticalGroupCandidateNomination {
  /** The list of other chosen candidates, can be empty */
  other_candidate_nomination: CandidateVotes[];
  /** Political group name for which this nomination applies */
  pg_name: string;
  /** Political group number for which this nomination applies */
  pg_number: number;
  /** The number of seats assigned to this group */
  pg_seats: number;
  /** The list of chosen candidates via preferential votes, can be empty */
  preferential_candidate_nomination: CandidateVotes[];
  /** The updated ranking of the whole candidate list, can be empty */
  updated_candidate_ranking: Candidate[];
}

/**
 * Contains information about the final assignment of seats for a specific political group.
 */
export interface PoliticalGroupSeatAssignment {
  /** The number of full seats assigned to this group */
  full_seats: number;
  /** Whether this group met the threshold for largest remainder seat assignment */
  meets_remainder_threshold: boolean;
  /** Political group number for which this assignment applies */
  pg_number: number;
  /** The remainder votes that were not used to get full seats assigned to this political group */
  remainder_votes: Fraction;
  /** The number of residual seats assigned to this group */
  residual_seats: number;
  /** The total number of seats assigned to this group */
  total_seats: number;
  /** The number of votes cast for this group */
  votes_cast: number;
}

/**
 * Contains the standing for a specific political group. This is all the information
 * that is needed to compute the apportionment for that specific political group.
 */
export interface PoliticalGroupStanding {
  /** The number of full seats this political group got assigned */
  full_seats: number;
  /** Whether the remainder votes meet the threshold to be applicable for largest remainder seat assignment */
  meets_remainder_threshold: boolean;
  /** The number of votes per seat if a new seat would be added to the current residual seats */
  next_votes_per_seat: Fraction;
  /** Political group number for which this standing applies */
  pg_number: number;
  /** The remainder of votes that was not used to get full seats (does not have to be a whole number of votes) */
  remainder_votes: Fraction;
  /** The current number of residual seats this political group got assigned */
  residual_seats: number;
  /** The number of votes cast for this group */
  votes_cast: number;
}

export interface PoliticalGroupVotes {
  candidate_votes: CandidateVotes[];
  number: number;
  total: number;
}

/**
 * Polling station of a certain [crate::election::Election]
 */
export interface PollingStation {
  address: string;
  election_id: number;
  id: number;
  locality: string;
  name: string;
  number: number;
  number_of_voters?: number;
  polling_station_type?: PollingStationType;
  postal_code: string;
}

export interface PollingStationDetails {
  pollingStationAddress: string;
  pollingStationElectionId: number;
  pollingStationId: number;
  pollingStationLocality: string;
  pollingStationName: string;
  pollingStationNumber: number;
  pollingStationNumberOfVoters?: number | null;
  pollingStationPostalCode: string;
  pollingStationType?: string;
}

/**
 * Polling station list response
 */
export interface PollingStationListResponse {
  polling_stations: PollingStation[];
}

/**
 * Polling station of a certain [crate::election::Election]
 */
export interface PollingStationRequest {
  address: string;
  locality: string;
  name: string;
  number: number;
  number_of_voters?: number;
  polling_station_type?: PollingStationType;
  postal_code: string;
}

/**
 * PollingStationResults, following the fields in Model Na 31-2 Bijlage 2.
 *
 * See "Model Na 31-2. Proces-verbaal van een gemeentelijk stembureau/stembureau voor het openbaar
 * lichaam in een gemeente/openbaar lichaam waar een centrale stemopneming wordt verricht,
 * Bijlage 2: uitkomsten per stembureau" from the
 * [Kiesregeling](https://wetten.overheid.nl/BWBR0034180/2024-04-01#Bijlage1_DivisieNa31.2) or
 * [Verkiezingstoolbox](https://www.rijksoverheid.nl/onderwerpen/verkiezingen/verkiezingentoolkit/modellen).
 */
export interface PollingStationResults {
  /** Differences counts ("3. Verschil tussen het aantal toegelaten kiezers en het aantal getelde stembiljetten") */
  differences_counts: DifferencesCounts;
  /** Vote counts per list and candidate (5. "Aantal stemmen per lijst en kandidaat") */
  political_group_votes: PoliticalGroupVotes[];
  /** Voters counts ("1. Aantal toegelaten kiezers") */
  voters_counts: VotersCounts;
  /** Votes counts ("2. Aantal getelde stembiljetten") */
  votes_counts: VotesCounts;
}

/**
 * Type of Polling station
 */
export type PollingStationType = "FixedLocation" | "Special" | "Mobile";

export interface PreferenceThreshold {
  /** Preference threshold as a number of votes */
  number_of_votes: Fraction;
  /** Preference threshold as a percentage (0 to 100) */
  percentage: number;
}

export interface RedactedEmlHash {
  /** Array holding the hash chunks as text */
  chunks: string[];
  /** Indexes of chunks that will be empty, sorted */
  redacted_indexes: number[];
}

export type ResolveDifferencesAction = "keep_first_entry" | "keep_second_entry" | "discard_both_entries";

export type ResolveErrorsAction = "discard_first_entry" | "resume_first_entry";

export type Role = "administrator" | "typist" | "coordinator";

/**
 * Response structure for saving data entry of polling station results
 */
export interface SaveDataEntryResponse {
  validation_results: ValidationResults;
}

/**
 * The result of the seat assignment procedure. This contains the number of seats and the quota
 * that was used. It then contains the initial standing after full seats were assigned,
 * and each of the changes and intermediate standings. The final standing contains the
 * number of seats per political group that was assigned after all seats were assigned.
 */
export interface SeatAssignmentResult {
  final_standing: PoliticalGroupSeatAssignment[];
  full_seats: number;
  quota: Fraction;
  residual_seats: number;
  seats: number;
  steps: SeatChangeStep[];
}

/**
 * Records the political group and specific change for a specific residual seat
 */
export type SeatChange =
  | (HighestAverageAssignedSeat & { changed_by: "HighestAverageAssignment" })
  | (HighestAverageAssignedSeat & { changed_by: "UniqueHighestAverageAssignment" })
  | (LargestRemainderAssignedSeat & { changed_by: "LargestRemainderAssignment" })
  | (AbsoluteMajorityReassignedSeat & { changed_by: "AbsoluteMajorityReassignment" })
  | (ListExhaustionRemovedSeat & { changed_by: "ListExhaustionRemoval" });

/**
 * Records the change for a specific seat, and how the standing is once
 * that seat was assigned or removed
 */
export interface SeatChangeStep {
  change: SeatChange;
  residual_seat_number?: number;
  standings: PoliticalGroupStanding[];
}

/**
 * Contains a summary count, containing both the count and a list of polling
 * stations that contributed to it.
 */
export interface SumCount {
  count: number;
  polling_stations: number[];
}

/**
 * Contains a summary of the differences, containing which polling stations had differences.
 */
export interface SummaryDifferencesCounts {
  fewer_ballots_count: SumCount;
  more_ballots_count: SumCount;
  no_explanation_count: SumCount;
  other_explanation_count: SumCount;
  too_few_ballots_handed_out_count: SumCount;
  too_many_ballots_handed_out_count: SumCount;
  unreturned_ballots_count: SumCount;
}

export interface UpdateUserRequest {
  fullname?: string;
  temp_password?: string;
}

/**
 * User object, corresponds to a row in the users table
 */
export interface User {
  created_at: string;
  fullname?: string;
  id: number;
  last_activity_at?: string;
  role: Role;
  updated_at: string;
  username: string;
}

export interface UserDetails {
  fullname?: string;
  role: string;
  userId: number;
  username: string;
}

export interface UserListResponse {
  users: User[];
}

export interface UserLoggedInDetails {
  loggedInUsersCount: number;
  userAgent: string;
}

export interface UserLoggedOutDetails {
  sessionDuration: number;
}

export interface ValidationResult {
  code: ValidationResultCode;
  fields: string[];
}

export type ValidationResultCode =
  | "F201"
  | "F202"
  | "F204"
  | "F301"
  | "F302"
  | "F303"
  | "F304"
  | "F305"
  | "F401"
  | "F402"
  | "W001"
  | "W201"
  | "W202"
  | "W203"
  | "W205"
  | "W206"
  | "W208"
  | "W301"
  | "W302";

export interface ValidationResults {
  errors: ValidationResult[];
  warnings: ValidationResult[];
}

export type VoteCountingMethod = "CSO" | "DSO";

/**
 * Voters counts, part of the polling station results.
 */
export interface VotersCounts {
  /** Number of valid poll cards ("Aantal geldige stempassen") */
  poll_card_count: number;
  /** Number of valid proxy certificates ("Aantal geldige volmachtbewijzen") */
  proxy_certificate_count: number;
  /** Total number of admitted voters ("Totaal aantal toegelaten kiezers") */
  total_admitted_voters_count: number;
}

/**
 * Votes counts, part of the polling station results.
 */
export interface VotesCounts {
  /** Number of blank votes ("Aantal blanco stembiljetten") */
  blank_votes_count: number;
  /** Number of invalid votes ("Aantal ongeldige stembiljetten") */
  invalid_votes_count: number;
  /** Total number of votes cast ("Totaal aantal getelde stemmen") */
  total_votes_cast_count: number;
  /** Number of valid votes on candidates
("Aantal stembiljetten met een geldige stem op een kandidaat") */
  votes_candidates_count: number;
}
